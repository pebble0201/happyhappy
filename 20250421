문제 만들어보기
js(web)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!--cat이 dog밑에 오도록 만들어보세요!-->
    <ul id="animal">
        <li>dog</li>
    </ul>

    <script>
        const $animal=document.getElementById('animal');
        const $li1 =document.createElement('li');
        $li1.textContent = 'cat';
        $animal.appendChild($li1);
    </script>

구조 분 할당 방법법으로 노드 추가하기 밑의 나라들이 animal 다음으로 올 수 있도록하기, 
영국을 호주 앞에 오게 해주세요!
<ul id="country">
    
    <li>호주</li>
    <li>영국</li>
</ul>
 <script>
    const $country = document.getElementById('country');

    const [$aus,$uk] = $country.children;

    $animal.appendChild($aus);
    $animal.insertBefore($uk,$aus);
 </script>

</body>
</html>

오늘 배운 것

<h1>02.요소노드의 텍스트 조작 </h1>

    <h3>nodeValue</h3>
    <pre>
            지금까지 살펴본 노드 탐색, 노드 정보 프로퍼티는 모두 읽기 전용 접근자
            프로퍼티이다.
            Node.prototype.nodeValue 프로퍼티는 setter와 getter가 모두 존재하는
            접근자 프로퍼티이다.
            
            nodeValue 프로퍼티 참조 시 노드 객체의 값(텍스트 노드의 텍스트)를 반환한다.
            텍스트 노드가 아닌 노드(문서 노드, 요소 노드)의 경우 null을 반환한다.

            텍스트 노드의 nodeValue 프로퍼티에 값을 할당하면 텍스트 노드의 값을 변경할 수 있다.
        </pre>

    <div id="area">nodeValue</div>
    <script>
        console.log(document.nodeValue); //document는 문서객체라 null값이 나온다.

        const $area = document.getElementById('area');
        console.log($area.nodeValue); //요소 노드도 null값을 반환한다.

        const $textNode = $area.firstChild;
        console.log($textNode.nodeValue);

        $textNode.nodeValue = '텍스트 값 변경 완료'; //내가 바꾸고 싶은 값 할당할 수 있다. setter가 안에 내장되어 있기 때문에
    </script>

    <h3>textContent</h3>
    <pre>
    Node.prototype.textContent 프로퍼티는 setter와 getter 모두 존재하는 프로퍼티로서
    요소 노드의 텍스트와 모든 자손 노드의 텍스트를 모두 취득하거나 변경한다.
    요소 노드의 textContent 프로퍼티를 참조하면 요소 노드의 콘텐츠 영역 내의 텍스트를 모두 반환하며
    이 때 HTML 마크업은 무시된다.
    요소 노드의 textContent 프로퍼티에 문자열을 할당하면 요소 노드의 모든 자식 노드가 제거되고 할당한
    문자열이 텍스트로 추가된다.
    이 때 HTML마크업은 무시되고 문자열 텍스트로 취급된다.
 </pre>

    <div id="area2">textContent<span>내부 span</span></div>

    <script>
        const $area2 = document.getElementById('area2');
        //HTML 마크업이 무시 된 div 내부의 컨텐츠만 텍스트로 취득
        console.log($area2.textContent); //안에 html마크업이 <span>이 무시 있으면 무시되고 텍스트만 반환해주는 프로퍼티
        
        console.log($area2.firstChild.nodeValue); //첫번째 자식이 textcontent 라서 

        //nodeValue는 텍스트 노드의 값만 반환하므로 textContent보다 코드가 복잡해진다.
        console.log($area2.lastChild.nodeValue); //마지막 자식은 span 그부분 그래서 span이라 나옴

        $area2.textContent = '텍스트 값 변경완료<span>내부 span</span>' //그대로 문자열로 나옴
    </script>


<body>
    <h1>01.노드 생성과 추가</h1>
    <pre>
        Document.prototype.creatElement(tagName) : 인수로 전달받은 태그 이름에 해당하는 요소 노드를 생성하여 반환
        Document.prototype.creatTextNode(tag) : 인수로 전달받은 텍스트 값으로 텍스트 노드를 생성하여 반환
        Node.prototype.appendChild(childNode) : 인수로 전달받은 노드를 appendChild 메소드를 호출한 노드의 마지막 자식 노드로 추가
        
    </pre>

    <ul id="drink">
        <li>커피</li>
    </ul>

    <script>
        const $drink = document.getElementById('drink');

        const $li = document.createElement('li'); //내가 li태그를 만들겠다 요소노드를 li태그로 만듦
        // <li></li>
        const textNode = document.createTextNode('콜라');
        // '콜라'
        //마지막 자식 요소로 추가해줘야함
        $li.appendChild(textNode); //li에다가 추가
        // <li>콜라</li>
        console.log($li);

        $drink.appendChild($li); //drink에다가 추가
    </script>

    <h3>복수의 노드 생성과 추가</h3>
    <ul id="food">
        <li>김치찌개</li>
    </ul>

    <script>
        const $food = document.getElementById('food'); //food를 취득해올거고

        const container = document.createElement('div');

        //여러 요소를 넣는 방법 배열로
        ['된장찌개','고등어구이','순대국'].forEach(text => {
            const $li = document.createElement('li');
            $li.textContent = text; //text라는 변수값으로 설정해준 것 textcontent를 li요소로 준것

            //DOM이 결국 3번 변경되고 있는 것,  DOM이 3번  변경되면서 리플로우, 리페인트 3번 실행되어 비효율적
            $food.appendChild($li); //반복문이 돌면서 세번씩 동작하고 있는 것

           //효율적인 방법..
            //div에 li를 추가 container에 추가
            container.append($li);
        });

        //컨테이너 요소 div를 사용하면 DOM 은 1번만 변경된다. 무 슨 소 리 . . . ^ ^ . . .
        $food.appendChild(container); //li를 세번 반복하는 것보다 container을 만들어놓고 붙이는게 효율적
    </script>
</body>


    <h1>02.노드 삽입, 이동</h1>

    <h3>노드 삽입</h3>
    <pre>
        Node.prototype.appendChild(childNode)
        Node.prototype.insertBefore(newNode, childNode) : 첫번째 인수로 전달받은 노드를
        두번째 인수로 전달받은 노드 앞에 삽입
        두번째 인수로 전달받은 노드는 반드시 insertBefore메소드를 호출한 노드의 자식 노드여야 한다.
    뉴 노드를 차일드 노드 앞에 삽입해야한다는 것
    </pre>

    <ul id="drink">
        <li>커피</li>
    </ul>

    <script>//드링크라는 걸 먼저 취득
        const $drink = document.getElementById('drink');
        const $li1 = document.createElement('li');
        $li1.textContent = '콜라';
        $drink.appendChild($li1); //드링크에다가 li 넣어주면 콜라가 삽입된걸 볼 수 있

        const $li2 = document.createElement('li');
        $li2.textContent = '우유'; //우유라고 주는 것

        //다른 곳에 추가
        $drink.insertBefore($li2, $drink.lastElementChild); //콜라 앞에다가 우유 넣을 수 있음

        const $li3 = document.createElement('li'); //li태그를 만들건데 ...
        $li3.textContent = '사이다';


        // 두번째 인수가 null이면 appendchild처럼 마지막 자식 노드로 추가
        $drink.insertBefore($li3, null); // inserbefore 두개의 인자를 전달해야하는 메소드이지만, appendchild처럼  null도 맨 마지막에 들어가게됨
    </script>

    <h3>노드 이동</h3>
    <pre>
        DOM에 이미 존재하는 노드를 appendChild, insertBefore메소드를 사용하여 DOM에 다시 추가하면
        현재 위치에서 노드를 제거하고 새로운 위치에 노드를 추가하는 노드 이동이 발생한다.
    </pre>

    <ul id="food">
        <li>파스타</li>
        <li>피자</li>
    </ul>

    <script>
        const $food = document.getElementById('food');

        const[$pasta, $pizza] = $food.children; //구조분할당..? children으로 pasta랑 pizza를 넣겠다는의미미
        // const $pasta = $food.firstElementChild;
        // const $pizza = $food.lastElementChild;

        //drink를 마지막 자식 요드로 추가
        $drink.appendChild($pasta); //노드가 이동된 것
        $drink.insertBefore($pizza,$pasta); //파스타 앞쪽에 추가하겠다 (노드이동)
    </script>
</body>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>03.노드 교체, 삭제</h1>

    <h3>노드 교체</h3>
    <pre>
        Node.prototype.replaceChild(newChild, oldChild) 메소드는 자신을 호출한 노드의 자식 노드인 oldChild 노드를
        newChild 노드로 교체한다.
        이때 oldChild는 replaceChild 메소드를 호출한 노드의 자식 노드여야하고 oldChild 노드는 DOM에서 제거된다.
    </pre>

    <ul id="drink">
        <li>커피</li>
        <li>사이다</li>
    </ul>

    <script> //커피를 콜라로 바꾸기
        const $drink = document.getElementById('drink');
        const $coffee = $drink.firstChild;

        const $newChild = document.createElement('li');
        $newChild.textContent = '콜라';

        $drink.replaceChild($newChild, $coffee);
    </script>

    <h3>노드 삭제</h3>
    <pre>
        Node.prototype.removeChild(child) 메소드는 child 매개변수에 인수로 전달한 노드를 DOM에서 삭제한다
        인수로 전달한 노드는 removeChild 메소드를 호출한 노드의 자식이어야한다
    </pre>

    <ul id="food">
        <li>파스타</li>
        <li>피자</li>
    </ul>

    <script>
        const $food = document.getElementById('food');

        $food.removeChild($food.lastElementChild); //피자를 삭제 돔에서 삭제
    </script>
</body>

</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>01.어트리뷰트</h1>

    <pre>
        Element.prototype.attributes 프로퍼티로 모든 어트리뷰트 노드를 취득할 수 있다
        attributes프로퍼티는 getter만 존재하는 읽기 전용 접근자 프로퍼티로 NameNodeMap 객체를 반환한다

    </pre>

    <label for="'username">유저명</label>
    <input type='text' id='username' value="user01">

    <script>
        const { attributes } = document.getElementById('username'); //중괄호는 왜...?! 그냥 약속된건지
        // const attributes = document.getElementById('username').attributes;

        console.log(attributes);
        console.log(attributes.type.value);
        console.log(attributes.id.value);
        console.log(attributes.value.value);
    </script>

    <pre>
        Element.prototype.getAttribute/setAttribute메소드를 사용하면
        attributes 프로퍼티를 통하지 않고 요소 노드에서 메소드를 통해 직접 HTML어트리뷰트 값을
        취득하거나 변경할 수 있어 편리하다.
    </pre>

    <script>
        const $input = document.getElementById('username');

        const inputValue = $input.getAttribute('value'); //한번에 가지고옴 attribute.이 아니고!
        console.log(inputValue);

        $input.setAttribute('value', 'user02'); //user01을 user02로 쉽게 바꾼
        console.log('------------')
    </script>

    <pre>
        Element.prototype.hasAttribute(attributeName) 메소드를 사용하면 특정 HTML 어트리뷰트가 존재하는지 확인할 수 있다.
        Element.prototype.removeAttribute(attributeName) 메소드를 사용하면 특정 HTML 어트리뷰트를 삭제할 수 있다.
    </pre>

    <label for = 'nickname'>닉네임</label>
    <input type = 'text' id = 'nickname' value="'JSMaster">

    <script> //name이라는 attribute있는지 확인 (없음)
        const $nickname = document.getElementById('nickname');

        console.log($nickname.hasAttribute('name'));

        if($nickname.hasAttribute('value')){
            nickname.removeAttribute('value'); //있는지 확인해서 있으면 지우겠다.
        }

        console.log($nickname.hasAttribute('value')); //value라는 속성 갖고 있는지~
    </script>
</body>

</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>02.HTML 어트리뷰트와 DOM 프로퍼티</h1>

    <pre>
        HTML 어트리뷰트 
        :HTML 요소의 초기 상태를 지정하며 변하지 않는다.
        어트리뷰트 노드에서 관리되며 값을 얻거나 변경하려면 getAttribute 메소드 사용한다
        
        DOM 프로퍼티
        : 사용자가 입력한 최신 상태를 관리한다.
        사용자의 입력에 의한 상태 변화에 반응하여 언제나 최신 상태를 유지한다
    </pre>

    <label for='username'>유저명</label>
    <input type="text" id="username" value="user01">
    <label for="nickname">닉네임</label>
    <input type="text" id="nickname" value="JSBeginner">

    <script>
        const $user = document.getElementById('username');

        //oninput 최신상태로 계속 바꿔주는 이벤트
        //사용자가 input 요소의 입력 필드에 값을 입력할 때마다 동작하는 이벤트
        $user.oninput = () => {
            console.log('value 프로퍼티 값', $user.value);
            console.log('value 어트리뷰트값', $user.getAttribute('value'));
        }

        const $nickname = document.getElementById('nickname');
        $nickname.value = 'JSMaster'; //프로퍼티값을 직접 할당해서 최신상태로 할 수 있

        console.log('value 프로퍼티 값', $nickname.value);
        console.log('value 어트리뷰트 값', $nickname.getAttribute('value')); //안에있는 어트리뷰트는 바뀌지 않아욥

        //id는 사용자 입력에 의한 상태 변화와 관계 없는 어트리뷰트이므로
        //id어트리뷰트와 id프로퍼티는 항상 동일한 값으로 연동된다.
        $nickname.id = 'nick'; //상태와 아예 관계 없는 .. value는 attribute는 항상 있..?
        console.log($nickname.id);
        console.log($nickname.getAttribute('id'));//직접 할당하면 바뀜

        // $nickname.type = 'search'; //
        // console.log($nickname.type);
        // console.log($nickname.getAttribute('type'));//직접 할당하면 바뀜
    </script>

    <pre>
        getAttribute 메소드로 취득한 어트리뷰트 값은 언제나 문자열이다.
        하지만 DOM 프로퍼티로 취득한 최신 상태 값은 문자열이 아닐 수 있다.
        checkbox 요소의 checked 어트리뷰트 값은 문자열이지만 checked 프로퍼티 값은 불리언 타입으로 반환된다.
    </pre>

    <label for="check">확인</label>
    <input type="checkbox" id="check" checked>

    <script>
        const $checkbox = document.querySelector('input[type=checkbox]'); //가지고오는법 인풋타입
        console.log($checkbox.getAttribute('checked')); //문자열로 갖고오게되는 getAttribute
        console.log($checkbox.checked); //프로퍼티로 직접 접근해서 가져오면 boolean값으로 가져오게 됨

    </script>

</body>

</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>01.line style</h1>
    <pre>
        HTMLElement.prototype.style 프로퍼티는 setter와 getter가 모두 존재하는 접근자 프로퍼티로 요소 노드의
        인라인 스타일을 취득하거나 추가 또는 변경한다.
        HTMLElement.prototype.style 프로퍼티는 CSSStyleDeclaration 타입의 객체 반환하는데
        이 프로퍼티에 값을 할당하면 해당 CSS프로퍼티가 인라인 스타일로 HTML요소에 추가되거나 변경된다.
    </pre>
    <div style="color: white;">AREA</div>
    <script>
        const $area = document.querySelector('div'); //태그 취득할 때 queryselector?

        //인라인 스타일 취득
        console.log($area.style); //cssstyledeclaration으로 나옴옴

        //인라인 스타일 추가
        $area.style.width = '100px';
        $area.style.height = '100px';

        $area.style.backgroundColor = 'lightgray' //마침표 표기법으로 접근한 것
        $area.style['background-color'] = 'lightgray' //대괄호 표기법 ' ' 랑 - 써줘야함함
    </script>

</body>

</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .area {
            width: 100px;
            height: 100px;
            border: 1px solid black;
        }

        .circle {
            border-radius: 50%;
        }

        .lightgray {
            background: lightgray;
        }

        .yellow {background: yellow;}
    </style>
</head>

<body>
    <h1>02.className과 classList</h1>

    <pre>
        class 어트리뷰트에 대응하는 DOM 프로퍼티는 class가 아니라 className, classList이다.
        Element.prototype.className 프로퍼티는 setter와 getter 모두 존재하는 접근자 프로퍼티로
        요소 노드의className 프로퍼티를 참조하면 class 어트리뷰트의 값을 반환하고,
        요소 노드 className 프로퍼티에 문자열을 할당하면 class어트리뷰트 값을 할당한 문자열로 변경한다.
        Element.prototype.classList 프로퍼티는 class 어트리뷰트의 정보를 담은 DOMTokenList 객체를 반환한다.
    </pre>

    <div class="area"></div>

    <script>
        const $area = document.querySelector('.area');
        console.log($area.className);
        console.log($area.classList);

        //add라는 메소드로 클래스 네임을 주거나 remove라는 메소드로 클래스네임을 줘서 값을 추가하거나 제거할 수 있다
        $area.classList.add('circle'); //클래스 이름 하나 추가 circle이라는
        $area.classList.add('lightgray');

        //item(index)는 인수로 전달한 인덱스에 해당하는 클래스를 class 어트리뷰트에서 반환한다.
        console.log($area.classList.item(0)); //0번째 인덱스
        console.log($area.classList.item(1)); //1번째 인덱스
        console.log($area.classList.item(2)); //2번째 인덱스

        //contains(className)은 인수로 전달한 문자열과 일치하는 클래스가 class 어트리뷰트에 포함되어 있는지 확인한다.
        console.log($area.classList.contains('circle')); //circle있으니까 true
        console.log($area.classList.contains('yellow')); //없으니까 false

        //replace(oldClassName, newClassName)는 첫번째 인수로 전달한 문자열을 두번째 인수로 전달한 문자열로 변경한다.
        $area.classList.replace('lightgray', 'yellow');//라이트 그레이를 옐로우로 바꾸겠다

        //toggle(className)은 class 어트리뷰트에 인수로 전달한 문자열과 일치하는 클래스가 존재하면 제거하고 존재하지 않으면 추가한다.
        $area.classList.toggle('yellow'); //있을 때 쓰면 제거해줌
        $area.classList.toggle('yellow'); //한번 더 쓰면 없으니까 추가를 해줌

        $area.classList.remove('yellow'); //그냥 바로 제거 remove
    </script>
</body>

</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>01. 이벤트 핸들러 어트리뷰트</h1>

    <h3>이벤트 핸들러 등록</h3>
    <pre>
        이벤트 핸들러 : 이벤트가 발생했을 때 브라우저에 호출을 위힘한 함수
         브라우저에게 이벤트 핸들러의 호출을 위임한 것을 이벤트 핸들러 등록이라고 하며,
         등록하는 방법은 3가지다.
    </pre>

    <h3>이벤트 핸들러 어트리뷰트 방식</h3>
    <pre>
        HTML 이벤트 핸들러 어트리뷰트 (on 접두사 + 이벤트 타입) 값으로 함수 호출문을 할당하여 이벤트 핸들러를 등록하는 방식이다.
        주의할 점은 함수 참조가 아닌 함수 호출문을 할당한다는 것이다.
    </pre>

    <button onclick = "alert('클릭했네?'); console.log('클릭했네?');">클릭하세요.</button>
    <button onmouseover ="hello('수강생')">마우스를 올려보세요</button>

    <script>
        function hello(name){  
            alert(`${name}님, 마우스 올리지마세요`);
        }
      
    </script>


    
</body>
</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>02.이벤트 핸들러 프로퍼티 방식</h1>
    <pre>
        이벤트 핸들러 프로퍼티 키는 이벤트 핸들러 어트리뷰트와 동일하며 (on 접두사 + 이벤트 타입)
        이벤트 핸들러 프로퍼티 함수를 바인딩하면 이벤트 핸들러가 등록된다.

        이벤트 핸들러 어트리뷰트 방식과 비교했을 때 HTML과 자바스크립트가 뒤섞이는 문제는 해결할 수 있지만
        이벤트 핸들러 프로퍼티에 하나의 이벤트 핸들러만 바인딩 할 수 있다는 단점이 있다.
    </pre>

    <button id="btn">클릭해보세요</button>
    <script>
        const $button = document.querySelector('#btn');

        $button.onclick = function () {
            alert('DOM 프로퍼티 방식으로 핸들러 등록 완료!');
        }

    //   y= f(x), f(x) = alert 

        $button.onclick = () => alert('이벤트 덮어쓰기?'); //딱 하나만 연결 이전 이벤트 무시
    </script>
</body>

</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>03.addEventListener 메소드 방식</h1>
    <pre>
        EventTarget.prototype.addEventListener 메소드를 사용하여 이벤트를 등록할 수 있다
        첫 번째 매개변수에는 이벤트 타입, 두 번재 매개변수에는 이벤트 핸들러 전달하고,
        마지막 매개변수에는 이벤트 전파 단계를 지정할 수 있다.

        이벤트 핸들러 프로퍼티에 바인딩 된 이벤트 핸들러에 아무런 영향을 주지 않는다.
        동일한 HTML 요소에서 발생한 동일한 이벤트에 대해 addEventListener 메소드 방식으로는
        하나 이상의 이벤트 핸들러를 등록할 수 있으며 이 때 이벤트 핸들러는 등록된 순서대로 호출된다.
    </pre>

    <button id = "btn">클릭해보세요</button>
    <script>
        const $button = document.getElementById('btn');
        $button.addEventListener('click', function() {
            alert('클릭했네?'); //두번째 매개변수에는 함수 지정해서 등록할 수 있음
        })

        //이벤트 핸들러 프로퍼티 방식 추가
        $button.onclick = function(){
            console.log('이벤트 핸들러 프로퍼티 방식으로 이벤트 핸들러 등록!');
        }

        //addEventListener 메소드 방식으로 하나 더 추가
        $button.addEventListener('click', function(){
            console.log('addEventListener 메소드 방식으로 이벤트 핸들러 등록!');
        }) //클릭이라는 이벤트 타입을 주고 두개 등록했고 각자의 방식으로 등록했지만 영향을 주고 있지 않음

        //참조가 동일한 이벤트 핸들러를 중복 등록하면 하나의 핸들러만 등록된다.
        const handleMouseOver = () => console.log('button mouseover');
        $button.addEventListener('mouseover',handleMouseOver); //mouseover할 때 어떤 걸 실행할거니(,함수)
        $button.addEventListener('mouseover',handleMouseOver); // 중복으로 등록해도 한번만 동작한다, 마우스 오버할 때 숫자가 하나씩만 올라간다
        
    </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>04. 이벤트 핸들러 제거</h1> //인자의 개수가 동일해야한다
    <pre>removeEventListener 메소드에 전달한 인수는 addEventListener 메소드와 동일하며,
        전달한 인수가 일치하지 않을 경우 이벤트 핸들러는 제거되지 않는다.
    </pre>

    <button id="btn">클릭해보세요</button>

    <script>
        const $button = document.getElementById('btn');

        const handleClick = () => alert('클릭했대!'); //두번째 인자로 등록???

        $button.addEventListener('click', handleClick);

        $button.removeEventListener('click', handleClick); //add와 인자 동일하게 해주어야 remove됨
    </script>


    <pre>
        이벤트 핸들러 프로퍼티 방식으로 등록한 이벤트 핸들러는 removeEventListener 메소드로 제거할 수 없고
        제거 하는 방법은 이벤트 핸들러 프로퍼티에 null을 할당해서 이벤트를 제거한다.
    </pre>

    <button id="btn2">더블클릭해보세요</button>

    <script>
        const $button2 = document.getElementById('btn2');

        const handleDblClick = () => {
            alert('더블클릭했다!');
        };

        //이벤트 핸들러 프로퍼티 방식으로 이벤트 핸들러 등록
        $button2.ondblclick = handleDblClick; //프로퍼티 방식으로 등록

        $button2.removeEventListener('dblclick', handleDblClick); //해도 프로퍼티 방식으로 등록했기 때문에 제거 안됨

        $button2.ondblclick = null; //이렇게 해야 안나옴

    </script>
</body>

</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>01.이벤트 객체</h1>
    <pre>
        이벤트 발생 시 이벤트에 관련한 다양한 정보를 가진 이벤트 객체가 동적으로 생성된다.
        생성된 이벤트 객체는 이벤트 핸들러의 첫번째 인수로 전달된다.
    </pre>

    <h1 class="message">아무곳이나 클릭해보세요. 클릭한 좌표를 알려드릴게요</h1>

    <script>
        const $msg = document.querySelector('.message');

        function showCoords(e) {
            console.log(e);
            $msg.textContent = `clientX : ${e.clientX}, clientY : ${e.clientY}`;
            } //textcontent 아무곳이나~ 이부분
        
        document.onclick = showCoords;
    </script>

    <pre>

        이벤트 핸들러 어트리뷰트 방식으로 이벤트 핸들러를 등록했다면 반드시 event라는 이름을 사용해야 한다.
    </pre>

    <div class = "area" onclick="showDivCoods(event)"> 
이 영역 내부를 클릭해보세요. 클릭한 좌표를 알려드릴게요.
    </div>

    <!-- //이벤트를 전달할거다 showdivcoods -->
    
    <script>
        const $area = document.querySelector('.area');

        function showDivCoods(e) {
            console.log(e);
            $area.textContent = `clientX : ${e.clientX}, clientY : ${e.clientY}`;
        }
    </script>


</body>
</html>



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <h1>이벤트 핸들러 내부의 this</h1>

    <h3>이벤트 핸들러 어트리뷰트</h3>

    <pre>
        이벤트 핸들러 어트리뷰트 방식의 경우 이벤트 핸들러에 의해 일반 함수로 호출되고 
        일반 함수 내부의 this는 전역 객체 window를 가리킨다.
        이벤트 핸들러 호출 시 인수로 전달한 this는 이벤트를 바인딩한 DOM요소를 가리킨다.
    </pre>

    <button onclick="handleClick1()">클릭해보세요</button>
    <!-- handleClick1이라는 함수 만든 것 -->
     <button onclick="handleClick2(this)">클릭해보세요</button> 
     <!-- button이라는 자체가 나옴옴 -->

     <script>
        function handleClick1(){
            console.log(this);
        }

        function handleClick2(button){
            console.log(button);
        }
     </script>


    <h3>이벤트 핸들러 프로퍼티, addEventListener</h3>

    <pre>
        이벤트 핸들러 프로퍼티 방식과 addEventListener 메소드 방식 모두 이벤트 핸들러 내부의 this는
        이벤트를 바인딩한 DOM요소를 가리킨다.
        즉, 이벤트 핸들러 내부의 this는 이벤트 객체의 currentTarget 프로퍼티와 같다.
    </pre>

    <button id = "btn1">클릭해보세요</button>
    <button id = "btn2">클릭해보세요</button>
    
    <script>
        const $btn1 = document.getElementById('btn1'); 
        // 접근하기 위해 btn1을 가져와야함
        const $btn2 = document.getElementById('btn2');

        console.log($btn2);

        //이벤트 핸들러 프로퍼티 방식
        $btn1.onclick = function(e){
            console.log(this);
            console.log(e.currentTarget);
            console.log(this === e.currentTarget); <!--값과 타입이 같니-->
        } // 설명 못해욥..

        //addEventListener 메소드 방식
        $btn2.addEventListener('click', function(e){
            console.log(this);
            console.log(e.currentTarget);
            console.log(this === e.currentTarget);
        }) //타이핑 못했어욥..
    </script>
    

</body>

</html>
