250604 교육일지

/* bean scope
        * 스프링 빈이 생성될 때 생성되는 인스턴스의 범위를 의미한다.
        * 스프링에서는 다양한 Bean scope를 제공한다.
        * - singleton : 하나의 인스턴스만을 생성하고, 모든 빈이 해당 인스턴스를 공유하며 사용한다.
        * - prototype : 매번 새로운 인스턴스를 생성한다.
package com.ohgiraffers.section03.properties;

import com.ohgiraffers.common.Beverage;
import com.ohgiraffers.common.Bread;
import com.ohgiraffers.common.Product;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

@Configuration
@PropertySource("section03/properties/product-info.properties") //경로지정
public class ContextConfiguration {

    /* 치환자 문법( ${} )을 이용하여 properties에 저장된 key를 입력하면 value에 해당하는 값을 꺼내온다.
    * 공백을 사용하면 값을 읽어오지 못하니 그대로 키 값을 적어줘야한다.
    *  : 을 이용하면 값을 읽어오지 못하는 경우 사용할 대체 값을 작성할 수 있다.
    * */

    @Value("${bread.carpbread.name}") //키값을 넣어줘야함
    private String carpBreadName; // (필드에 등록하고) 이 필드에 carpBread들어갈것

//    @Value("${bread.carpbread.price:0}") //안쓰면 0원이라도 불러오겠다.!!! (치환)
    @Value("${bread.carpbread.price}")
    private int carpBreadPrice;

    @Value("${beverage.milk.name}")
    private String milkName;

    @Value("${beverage.milk.price:0}")
    private int milkPrice;

    @Value("${beverage.milk.capacity:0}")
    private int milkCapacity;


    @Bean
    public Product carpBread() { //객체 생성

        return new Bread(carpBreadName, carpBreadPrice, new java.util.Date());
    }

    @Bean
    public Product milk() {
        return new Beverage(milkName, milkPrice, milkCapacity);
    }

    @Bean
    public Product water(@Value("${beverage.water.name}") String waterName,
                         @Value("${beverage.water.price}")int waterPrice,
                         @Value("${beverage.water.capacity}")int waterCapacity) {

        return new Beverage(waterName, waterPrice, waterCapacity);
    }
}

package com.ohgiraffers.section01.scope.subsection01.singleton;

import com.ohgiraffers.common.Beverage;
import com.ohgiraffers.common.Bread;
import com.ohgiraffers.common.Product;
import com.ohgiraffers.common.ShoppingCart;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Application {

    public static void main(String[] args) {

        /* bean scope
        * 스프링 빈이 생성될 때 생성되는 인스턴스의 범위를 의미한다.
        * 스프링에서는 다양한 Bean scope를 제공한다.
        * - singleton : 하나의 인스턴스만을 생성하고, 모든 빈이 해당 인스턴스를 공유하며 사용한다.
        * - prototype : 매번 새로운 인스턴스를 생성한다.
        * - request : HTTP 요청을 처리할 때마다 새로운 인스턴스를 생성하고 요청 처리가 끝나면 인스턴스를 폐기한다.
        * - session : HTTP 세션 당 하나의 인스턴스를 생성하고, 세션이 종료되면 인스턴스를 폐기한다.
        * - globalSession : 전역세션 당 하나의 인스턴스를 생성하고, 전역 세션이 종료되면 인스턴스를 폐기한다.
        * */

        ApplicationContext context =
                new AnnotationConfigApplicationContext(ContextConfiguration.class); //저기에 메타 정보를 ..?

//        String[] beanNames = context.getBeanDefinitionNames();
//        for(String beanName : beanNames) {
//            System.out.println("beanName = " + beanName);
//        }

        /* 붕어빵, 우유, 지리산수 등의 빈 객체를 반환 받는다.*/
        Product carpBread = context.getBean("carpBread", Bread.class);
        Product milk = context.getBean("milk", Beverage.class);
        Product water = context.getBean("water", Beverage.class);

        /* 첫 손님 쇼핑카트 꺼내기*/
        ShoppingCart cart1 = context.getBean("cart", ShoppingCart.class);
        cart1.addItem(carpBread);
        cart1.addItem(milk);

        System.out.println("cart1에 담긴 상품 : " + cart1.getItems());

        /* 두번째 손님 카트 꺼내*/
        ShoppingCart cart2 = context.getBean("cart", ShoppingCart.class);
        cart2.addItem(water);

        System.out.println("cart2에 담긴 상품 : " + cart2.getItems());
        //왜 붕어빵 우유 같이 담겼는지 (같은 카트 싱글톤 이라서)

        //같은거 확인 기본적으로 싱글톤이 동작하고 있는 것
        System.out.println(cart1.hashCode());
        System.out.println(cart2.hashCode());

        /*스프링프레임워크에서 Bean의 기본 스코프는 singleton이다.
        * singleton 스코프를 갖는 Bean애플리케이션 내에서 유일한 인스턴스를 갖는다.
        * 이 예제에서 손님 두 명이 각각 쇼핑카트를 이용해 상품을 담았을 때
        * singleton으로 관리되는 cart는 두 손님이 동일한 카트에 물건을 담게 된다.
        **/
    }
}
