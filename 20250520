250520 교육일지

subquery 실습문제 풀어보기

수정 후

-- 1. 부서코드가 노옹철 사원과 같은 소속의 직원 명단 조회하세요.
-- 서브 쿼리
select
dept_code
from employee
where emp_name = '노옹철';

-- 메인쿼리
select
emp_name,
dept_code
from employee
where dept_code = (
select
dept_code
from employee
where emp_name = '노옹철');

-- 2. 전 직원의 평균 급여보다 많은 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하세요.
select
avg(salary)
from employee;

select
emp_id, emp_name, job_code, salary
from employee
where salary >
(select
avg(salary)
from employee);

-- 3. 노옹철 사원의 급여보다 많이 받는 직원의 사번, 이름, 부서코드, 직급코드, 급여를 조회하세요.
select
salary
from employee
where emp_name = '노옹철';

select
emp_id, emp_name, dept_code, job_code, salary
from employee
where salary > (
select
salary
from employee
where emp_name = '노옹철');

-- 4. 가장 적은 급여를 받는 직원의 사번, 이름, 부서코드, 직급코드, 급여, 입사일을 조회하세요.
select
min(salary)
from employee;

select emp_id, emp_name, dept_code, job_code, salary, hire_date
from employee
where salary = 
(select
min(salary)
from employee);

-- *** 서브쿼리는 SELECT, FROM, WHERE, HAVING, ORDER BY절에도 사용할 수 있다.

-- 5. 부서별 최고 급여를 받는 직원의 이름, 직급코드, 부서코드, 급여 조회하세요.
select max(salary)
from employee;

select emp_name, job_code, dept_code, salary
from employee
where salary in
(select max(salary)
from employee
group by DEPT_CODE);

-- *** 여기서부터 난이도 극상

-- 6. 관리자에 해당하는 직원에 대한 정보와 관리자가 아닌 직원의 정보를 추출하여 조회하세요.
-- 사번, 이름, 부서명, 직급, '관리자' AS 구분 / '직원' AS 구분
-- HINT!! is not null, union(혹은 then, else), distinct

-- 관리자
select e.manager_id, e.emp_name as 이름, e.emp_id as 사번, d.dept_title as 부서명 , j.job_name as 직급, '관리자' as 구분
from employee e
join department d on d.DEPT_ID = e.DEPT_CODE
join job j on j.JOB_CODE = e.JOB_CODE
where manager_id is null
union
select e.manager_id,  e.emp_name, e.emp_id, d.dept_title, j.job_name, '직원' as 구분
from employee e
join department d on d.DEPT_ID = e.DEPT_CODE
join job j on j.JOB_CODE = e.JOB_CODE
where manager_id is not null;

-- 7. 자기 직급의 평균 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하세요.
-- 단, 급여와 급여 평균은 만원단위로 계산하세요.
-- HINT!! round(컬럼명, -5)
select avg(SALARY), dept_code
from employee
group by dept_code;

select emp_id, emp_name, job_code, salary
from employee
where (salary, job_code) in
(select avg(SALARY), job_code
from employee
group by dept_code);

-- 8. 퇴사한 여직원과 같은 부서, 같은 직급에 해당하는 직원의 이름, 직급코드, 부서코드, 입사일을 조회하세요.
select ent_date, dept_code, job_code
from employee
where ent_date is not null;

select e.emp_name, d.dept_title, e.job_code, e.dept_code, e.hire_date
from employee e
join department d on d.dept_id = e.dept_code 
where dept_code = (
select dept_code
from employee
where ent_date is not null)
and job_code =(
select job_code
from employee
where ent_date is not null)
and ent_date is null;

-- 9. 급여 평균 3위 안에 드는 부서의 부서 코드와 부서명, 평균급여를 조회하세요.
-- HINT!! limit
select d.dept_id, d.dept_title, e.salary
from department d
join employee e on d.DEPT_ID = e.DEPT_CODE
where d.dept_id = 
(select avg(salary)
from employee
group by dept_code
limit 3);

-- 평균 3위 부서 ..
select avg(salary), DEPT_CODE
from employee
group by dept_code
limit 3;


-- 10. 부서별 급여 합계가 전체 급여의 총 합의 20%보다 많은 부서의 부서명과, 부서별 급여 합계를 조회하세요.
-- 카테고리 별 메뉴 가격 합계 구하기
select sum(salary), DEPT_CODE -- 집계함수는 group by
from employee
group by dept_code;



수정 전

-- 1. 부서코드가 노옹철 사원과 같은 소속의 직원 명단 조회하세요.
-- 서브 쿼리
select
dept_code
from employee
where emp_name = '노옹철';

-- 메인쿼리
select
emp_name,
dept_code
from employee
where dept_code = (
select
dept_code
from employee
where emp_name = '노옹철');

-- 2. 전 직원의 평균 급여보다 많은 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하세요.
select
avg(salary)
from employee;

select
emp_id, emp_name, job_code, salary
from employee
where salary >=
(select
avg(salary)
from employee);

-- 3. 노옹철 사원의 급여보다 많이 받는 직원의 사번, 이름, 부서코드, 직급코드, 급여를 조회하세요.
select
salary
from employee
where emp_name = '노옹철';

select
emp_id, emp_name, dept_code, job_code, salary
from employee
where salary > (
select
salary
from employee
where emp_name = '노옹철');

-- 4. 가장 적은 급여를 받는 직원의 사번, 이름, 부서코드, 직급코드, 급여, 입사일을 조회하세요.
select
min(salary)
from employee;

select emp_id, emp_name, dept_code, job_code, salary, hire_date
from employee
where salary = 
(select
min(salary)
from employee);

-- *** 서브쿼리는 SELECT, FROM, WHERE, HAVING, ORDER BY절에도 사용할 수 있다.

-- 5. 부서별 최고 급여를 받는 직원의 이름, 직급코드, 부서코드, 급여 조회하세요.
select max(salary)
from employee;

select emp_name, job_code, dept_code, salary
from employee
where salary =
(select max(salary)
from employee);

-- *** 여기서부터 난이도 극상

-- 6. 관리자에 해당하는 직원에 대한 정보와 관리자가 아닌 직원의 정보를 추출하여 조회하세요.
-- 사번, 이름, 부서명, 직급, '관리자' AS 구분 / '직원' AS 구분
-- HINT!! is not null, union(혹은 then, else), distinct

-- 관리자
select e.manager_id, e.emp_name, e.emp_id, d.dept_title, j.job_name
from employee e
join department d on d.DEPT_ID = e.DEPT_CODE
join job j on j.JOB_CODE = e.JOB_CODE
where manager_id is null;

-- 관리자 아닌 사람
select e.manager_id, e.emp_name, e.emp_id, d.dept_title, j.job_name
from employee e
join department d on d.DEPT_ID = e.DEPT_CODE
join job j on j.JOB_CODE = e.JOB_CODE
where manager_id is not null;

-- 7. 자기 직급의 평균 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하세요.
-- 단, 급여와 급여 평균은 만원단위로 계산하세요.
-- HINT!! round(컬럼명, -5)
select avg(SALARY), dept_code
from employee
group by dept_code;

select emp_id, emp_name, job_code, salary
from employee
where salary = 
(select avg(SALARY), dept_code
from employee
group by dept_code);

-- 8. 퇴사한 여직원과 같은 부서, 같은 직급에 해당하는 직원의 이름, 직급코드, 부서코드, 입사일을 조회하세요.
select ent_date, dept_code, job_code
from employee
where ent_date is not null;

select e.emp_name, d.dept_title, e.job_code, e.dept_code, e.hire_date
from employee e
join department d on d.dept_id = e.dept_code 
where dept_code = (
select dept_code
from employee
where ent_date is not null)
and job_code =(
select job_code
from employee
where ent_date is not null);

-- 9. 급여 평균 3위 안에 드는 부서의 부서 코드와 부서명, 평균급여를 조회하세요.
-- HINT!! limit
select d.dept_id, d.dept_title, e.salary
from department d
join employee e on d.DEPT_ID = e.DEPT_CODE
where d.dept_id = 
(select avg(salary)
from employee
group by dept_code
limit 3);

-- 평균 3위 부서 ..
select avg(salary), DEPT_CODE
from employee
group by dept_code
limit 3;


-- 10. 부서별 급여 합계가 전체 급여의 총 합의 20%보다 많은 부서의 부서명과, 부서별 급여 합계를 조회하세요.
-- 카테고리 별 메뉴 가격 합계 구하기
select dept_code, sum(salary)
from employee
order by salary desc;
