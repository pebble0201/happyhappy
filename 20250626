250626 교육일지

createElement로 엘리먼트를 정의하는 방식은 번거롭고 가독성도 좋지 않다. 그래서 리액트 팀은 ReactElement를 정의하기 위해 JSX문법을 제공한다.
JSX는 JavsScript의 확장 문법으로 JavaScript에서 HTML의 markup(태그) 방식처럼 엘리먼트를 생성하여 Component를 만들 수 있다.
단, JSX는 공식적인 JavaScript 문법이 아니므로 바벨(babel)이라는 트랜스파일링 툴을 필요로 한다. 바벨은 간단하게 CDN링크를 추가하면 사용할 수 있다.
JSX는 다른 문법과 다르게 중괄호를 활용하여 주석을 사용할 수 있고, 그 외의 javascript표현식 등도 중괄호를 활용하여 적용할 수 있다. react 엘리먼트는 최상위 노드는 하나로만 구성해야 한다.
2개 이상일 때는 에러가 발생한다. JSX를 활용한 엘리먼트 생성 시 inline 방식으로 스타일을 적용할 때 javascript의 객체를 활용할 수 있는데, 그 때 css 속성명은 카멜케이스로 작성해야 한다.
component를 정의할 때 render() 함수는 반드시 작성되어야 하고 반환값으로는 렌더링 될 리액트 엘리먼트를 정의한다.
장점은 중복되는 엘리먼트들을 추상화해서 컴포넌트로 작성하고, 작성된 컴포넌트를 재사용 하는 것이 리액트가 추구하는 한 가지 방향이다.
클래스형 컴포넌트와 함수형 컴포넌트가 있는데, 보통 함수형 컴포넌트를 권장한다. 하지만 state 사용 및 라이프 사이클 기능, 임의의 메소드 정의 등은 클래스 컴포넌트에서만 사용가능한 방식이다.
리액트 팀은 함수형 컴포넌트 사용을 권장하지만 클래스형 컴포넌트를 없애기 보다 계속 유지하는 방향을 선택했다고 하며
컴포넌트를 활용할 때 menu컴포넌트가 존재할 시 <Menu/>와 같이 앞글자를 대문자로, 닫기 태그를 작성해주고, 클래스나 함수 이름과 동일해야 한다는 규칙이 있다. 
컴포넌트는 자신의 리액트엘리먼트생성을 위해 다른 컴포넌트를 참조할 수 있는데, 컴포넌트는 재사용 가능한 크기로 작게 유지되어야 하고 순수 함수처럼 작성되어야 한다. 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"> </div>

    <!--배열의 문법
    arr.map(callback);
    - callback 함수의 파라미터로 전달 된 배열 내 각 요소를 원하는 규칙에 따라 변환 후 그 결과로 새로운 배열 반환

    callback: 새로운 배열 요소를 생성하는 규칙을 담은 함수로 파라미터는 3가지를 가질 수 있다.
    - currentValue: 현재 처리하고 있는 요소
    - index: 현재 처리하고 있는 요소의 index값
    - array: 현재 처리하고 있는 원본 배열
    -->
   
   <script type="text/babel">

    const numbers = [1, 2, 3, 4, 5]
    const results = numbers.map(num => num * num)
    console.log(results);

    const fruits = ['🍑','🍒','🍎']
    fruits.map((currentValue, index, array) => {
        console.log(currentValue);
        console.log(index);
        console.log(array);
    })

    function Items({names}) {

        return (
            <ul>
                {names.map(name => <li>{name}</li>)}
            </ul>
        )

    }

    const names = ['판다', '코알라', '원숭이']
      
      ReactDOM.createRoot(document.getElementById('root')).render(<Items names={names}/>);
    
    </script>
</body>
</html>
