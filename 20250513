250513 교육일지

/*comment. 컬렉션 프레임워크에 대해 이해하기 */
        /* 컬렉션 프레임워크는 데이터를 효율적으로 저장하는 자료구조와
        * 데이터를 처리하는 알고리즘을 미리 구현해 놓은 클래스이다.
        * */

        //면접질문 잘
        /* collection Framework는 크게 3가지 인터페이스 중 한가지를 상속받아 구현해 놓았다.
        * 1. List 인터페이스
        * 2. Set 인터페이스
        * 3. Map 인터페이스
        *
        * 각 인터페이스 별 특징
        * 1. List 인터페이스
        * -순서 있는 데이터 집합으로 데이터의 중복 저장을 허용한다.
        * -vector, ArrayList, LinkedList, Stack, Queue 등이 있다.
        *
        * 2. Set 인터페이스
        * -순서가 없는 데이터 집합으로 데이터의 중복을 허용하지 않는다.
        * -HashSet, TreeSet등이 있다.
        *
        * 3. Map 인터페이스
        * -키와 값 한 쌍으로 이루어지는 데이터 집합이다.
        * -key를 Set 방식으로 관리하기 때문에 데이터의 순서를 관리하지 않고 중복된 key를 허용하지 않는다.
        * -Value는 중복된 값을 저장할 수 있다.
        * -HashMap, TreeMap, HashTable, Properties등이 있다.
        * */

        /* ArrayList
        * 가장 많이 사용되는 컬렉션 클래스이다.
        * 내부적으로 배열을 이용하여 요소를 관리하며, 인덱스를 이용해 배열 요소에 빠르게 접근할 수 있다.
        *
        * ArrayList는 배열의 단점을 보완하기 위해 만들어졌다.
        * 배열은 크기를 변경할 수 없고, 요소의 추가, 삭제, 정렬 등이 복잡하다는 단점을 가지고 있다.
        * ArrayList는 저러한 배열의 단점을 보완하고자
        * 크기변경, 요소의 추가, 삭제, 정렬 기능들을 미리 메소드로 구현해서 제공하고 있다.
        * 자동적으로 수행되는 것이지 속도가 빨라지는 것이 아니다.
        * */

        ArrayList alist = new ArrayList(); //내부적으로 10칸짜리 한번에 생성

        List list = new ArrayList(); //다형성?을 이용해서 만들 수 있

        Collection clist = new ArrayList<>(); //collection 상위 어쩌고 .. 만들 수 있..??

        alist.add("apple");
        alist.add(123);
        alist.add(45.34);//요소 추가 add
        alist.add(new Date()); //인스턴스로 저장되는,, 기본 자료형 아니고 객체임! ! !

        System.out.println(alist); //저장 순서 유지

        System.out.println(alist.size()); //4개 들어있으니 4개라고 찍힘

        for(int i = 0; i < alist.size(); i++) {
            System.out.println(i + " : " + alist.get(i)); //인덱스에 있는 값 가져오고 싶으면 get
        }

        alist.add("apple");
        System.out.println(alist); //값 중복으로 저장, 데이터의 중복 저장을 허용
        //배열 형태로 관리되어 인덱스로 관리되니 다른곳에 저장되어 중복이 되는 것...??

        alist.add(1,"banana");
        System.out.println(alist);//원하는 위치에도 넣을 수 있

        //값을 삭제할때
        alist.remove(2);
        System.out.println(alist); //123 사라짐

        //값을 수정할 때
        alist.set(1, Boolean.valueOf(true));
        System.out.println(alist); //true값으로 변함

        List<String> stringList = new ArrayList<>();
        stringList.add("apple");
//        stringList.add(123);//올바르지 않은 값넣으면 타입 덕분에.. 오류뜸
        stringList.add("banana");
        stringList.add("orange");
        stringList.add("mango");
        stringList.add("grape");

        System.out.println(stringList);

        //오름차순 정렬
        Collections.sort(stringList);

        System.out.println(stringList);

        stringList = new LinkedList<>(stringList);//구현체에 넣..? 잘 못들었어욥.. 괄호 안이 () 구현하는 ..곳?

        /* Iterator 반복자 인터페이스를 활용해서 역순으로 정렬한다.
        * LinkedList 타입으로 형변환 한 후 descendingIterator() 메소드를 사용하면
        * 내림차순 정렬된 Iterator 타입의 목록으로 반환을 해 준다.
        *
        * Iterator란?
        * collection인터페이스의 iterator() 메소드를 이용해서 인스턴스를 생성할 수 있다.
        * 컬렉션에서 값을 읽어오는 방식을 통일된 방식으로 제공하기 위해 사용한다.
        * 반복자라고 불리우며, 반복문을 이용해서 목록을 하나씩 꺼내는 방식으로 사용하기 위함이다.
        * 인덱스로 관리되는 컬렉션이 아닌 경우에는 반복문을 사용해서 요소에 하나씩 접근할 수 없기 때문에
        * 인덱스를 사용하지 않고도 반복문을 사용하기 위한 목록을 만들어 주는 역할이라고 보면 된다.
        * hasNext() : 다음 요소를 가지고 있는 경우 true, 더 이상 요소가 없는 경우 false를 반환
        * next() : 다음 요소를 반환
        * */
        Iterator<String> dIter = ((LinkedList<String>) stringList).descendingIterator();

        while (dIter.hasNext()) { //여기에서 요소 있는지 체크
            System.out.println(dIter.next());//꺼냈는지??
        }

        List<String> descList = new ArrayList<>();
        while(dIter.hasNext()) {
            System.out.println(dIter.next());
        }
        System.out.println(descList);
    }
}

/* comment. ArrayList의 정렬 기능 */

        List<BookDTO> bookList = new ArrayList<>();

        bookList.add(new BookDTO(1, "홍길동전","허균",50000));
        bookList.add(new BookDTO(2, "목민심서","정약용",30000));
        bookList.add(new BookDTO(3, "동의보감","허준",40000));
        bookList.add(new BookDTO(4, "삼국사기","김부식",46000));
        bookList.add(new BookDTO(5, "삼국유사","일연",58000));

//        Collections.sort(bookList);

        for(BookDTO book : bookList) {
            System.out.println(book);
        }

        /*가격 순으로 오름차순 정렬*/
        bookList.sort(new AscendingPrice());

        System.out.println("가격 오름차순 정렬 =====");
        for(BookDTO book : bookList) {
            System.out.println(book);
        }

        /* 가격 내림차순 정렬 */
        bookList.sort(new Comparator<BookDTO>() {
            @Override
            public int compare(BookDTO o1, BookDTO o2) {

                //순서를 바꾸는 경우 양수, 바꾸지 않는 경우에는 음수 반환
                return o1.getPrice() >= o2.getPrice()? -1: 1;
            }
        });

        System.out.println("가격 내림차순 정렬 =====");
        for(BookDTO book : bookList) { //bookList의 요소 하나하나를 book에 담은 것
            System.out.println(book);
        }

        /* 제목 순 오름차순 정렬 */
        bookList.sort(new Comparator<BookDTO>() {
            @Override
            public int compare(BookDTO o1, BookDTO o2) {

                //앞 값이 더 작은 경우 음수 반환,
                //같으면 0 반환
                //앞 값이 더 큰 경우 양수 반환(바꿔야 되는 경우)
                return o1.getTitle().compareTo(o2.getTitle());
            }
        });

        System.out.println("책 제목 순으로 오름차순 정렬 =====");
        for(BookDTO book : bookList) {
            System.out.println(book);
        }

        /* 제목 순 내림차순 정렬 */
        bookList.sort((BookDTO b1, BookDTO b2) -> b2.getTitle().compareTo(b1.getTitle()));

        System.out.println("책 제목 순으로 내림차순 정렬 =====");
        for(BookDTO book : bookList) {
            System.out.println(book);
     }

        /* 저자 오름차순 정렬 */
        bookList.sort(new Comparator<BookDTO>() {
            @Override
            public int compare(BookDTO o1, BookDTO o2) {
                return o1.getAuthor().compareTo(o2.getAuthor());
            }
        });

        System.out.println("책 저자 오름차순 정렬 ====");
        for(BookDTO book : bookList) {
            System.out.println(book);
        }

        /* 저자 내림차순 정렬 */
        bookList.sort((BookDTO b1, BookDTO b2) -> b2.getAuthor().compareTo(b1.getAuthor()));

        System.out.println("책 저자 내림차순 정렬 ====");
        for(BookDTO book : bookList) {
            System.out.println(book);
        }
    }


    /* comment. LinkedList에 대해 이해하고 사용할 수 있다. */
    /* LinkedList
    * ArrayList가 배열을 이용해서 발생할 수 있는 성능적인 단점을 보완하고자 고안되었다.
    * 내부는 이중 연결 리스트로 구현되어 있다.
    *
    *
    * 단순(일) 연결 리스트
    * : 저장된 요소가 순서를 유지하지 않고 저장되지만 이러한 요소들 사이를 링크로 연결하여 구성하며
    *   마치 연결된 리스트 형태인 것처럼 만든 자료구조이다.
    *   요소의 저장과 삭제 시 다음 요소를 가리키는 참조 링크만 변경하면 되기 때문에
    *   요소의 저장과 삭제가 빈번히 일어나는 경우 ArrayList보다 성능면에서 우수하다.
    *   하지만 단일 연결 리스트는 다음 요소만 링크하기 때문에 이전 요소로 접근하기 어렵다.
    *   이를 보완하고자 만든 것이 이중 연결 리스트이다.
    *
    * 이중 연결 리스트
    * : 단일 연결 리스트는 다음 요소만 링크하는 반면 이중 연결 리스트는 이전 요소도 링크하여
    *   이전 요소로 접근하기 쉽게 고안된 자료구조이다.
    *
    * LinkedList는 이중 연결리스트를 구현한 것이며 역시 List 인터페이스를 상속받아서
    * ArrayList와 사용하는 방법이 거의 유사하다.
    * 하지만 내부적으로 요소를 저장하는 방법에 차이가 있는 것이다.
    * 각 컬렉션 프레임워크 클래스들의 특징을 파악하고 그에 따라 적합한 자료구조를 구현한 클래스를 선택하는 것이 좋다.
    * */
    List<String> linkedList = new LinkedList<>(); //String만 사용할 수 있게

    linkedList.add("apple"); //추가
    linkedList.add("banana");
    linkedList.add("orange");
    linkedList.add("mango");
    linkedList.add("grape");

        System.out.println(linkedList.size());

        for(int i = 0; i <linkedList.size(); i++) {
            System.out.println(i + " : " + linkedList.get(i));
        }

        linkedList.remove(1);

        for(String s : linkedList) {
            System.out.println(s);
        }

        linkedList.set(0,"fineapple"); //바꾸기?

        System.out.println(linkedList);

        System.out.println(linkedList.isEmpty()); //비어있니? 그럼 true 아님 false

        linkedList.clear(); //요소 전부 없애기

        System.out.println(linkedList.isEmpty());
    }

/* comment. Stack에 대해 이해하고 사용할 수 있다. */
        /* Stack은 리스트 계열 클래스의 Vector 클래스를 상속받아 구현하였다.
        * 스택 메모리 구조는 선형 메모리 공간에 데이터를 저장하며
        * 후입선출(LIFO - Last Input First Out)방식의 자료 구조라 불린다.
        * */

        Stack<Integer> integerStack = new Stack<>();

        // 값을 넣을 때 push()
        integerStack.push(1);
        integerStack.push(2);
        integerStack.push(3);
        integerStack.push(4);
        integerStack.push(5);

        System.out.println(integerStack);

        //요소를 찾을 때 search()
        System.out.println(integerStack.search(5)); //인덱스가 아니고 위에서부터 순서를 찾는 것 (쌓여있는 5가 첫번째로 들어있)

        //peek() : 해당 스택의 가장 마지막에 있는(상단에 있는) 요소 반환
        //pop() : 해당 스택의 가장 마지막에 있는(상단에 있는) 요소 반환 후 제거

        System.out.println(integerStack.peek());
        System.out.println(integerStack);

        System.out.println(integerStack.pop());
        System.out.println(integerStack); //5가 반환되고 제거까지 되어있음

        System.out.println(integerStack.pop());
        System.out.println(integerStack.pop());
        System.out.println(integerStack.pop());
        System.out.println(integerStack.pop());
    }
}

/* comment. Queue에 대해 이해하고 사용할 수 있다. */
        /* Queue는 선형 메모리 공간에 데이터를 저장하는
        * 선입선출(FIFO - First Input First Out)방식의 자료구조이다.
        * Queue 인터페이스를 상속받는 하위 인터페이스들은
        * Deque, BlockingQueue, BlockingDeque, TransferQueue등 다양하지만
        * 대부분의 류는 LinkedList를 이용한다.
        * */
//        Queue<String> que = new Queue<>();

        Queue<String> que = new LinkedList<>();

        //데이터를 넣을 때 offer()
        que.offer("first");
        que.offer("second");
        que.offer("third");
        que.offer("fourth");
        que.offer("fifth");

        System.out.println(que); //list형태로 잘 들어가있음

        //peek() : 해당 큐의 가장 앞에 있는 요소(먼저 들어온 요소)를 반환한다.
        //poll() : 해당 큐의 가장 앞에 있는 요소(먼저 들어온 요소)를 반환하고 제거한다.

        System.out.println(que.peek());
        System.out.println(que.peek());

        System.out.println(que);

        System.out.println(que.poll());
        System.out.println(que.poll());

        System.out.println(que);
    }
