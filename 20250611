250611 교육일지

매일 푸는 문제 시간 

문제 설명
얀에서는 매년 달리기 경주가 열립니다. 해설진들은 선수들이 자기 바로 앞의 선수를 추월할 때 추월한 선수의 이름을 부릅니다. 예를 들어 1등부터 3등까지 "mumu", "soe", "poe" 선수들이 순서대로 달리고 있을 때, 해설진이 "soe"선수를 불렀다면 2등인 "soe" 선수가 1등인 "mumu" 선수를 추월했다는 것입니다. 즉 "soe" 선수가 1등, "mumu" 선수가 2등으로 바뀝니다.

선수들의 이름이 1등부터 현재 등수 순서대로 담긴 문자열 배열 players와 해설진이 부른 이름을 담은 문자열 배열 callings가 매개변수로 주어질 때, 경주가 끝났을 때 선수들의 이름을 1등부터 등수 순서대로 배열에 담아 return 하는 solution 함수를 완성해주세요.

제한사항
5 ≤ players의 길이 ≤ 50,000
players[i]는 i번째 선수의 이름을 의미합니다.
players의 원소들은 알파벳 소문자로만 이루어져 있습니다.
players에는 중복된 값이 들어가 있지 않습니다.
3 ≤ players[i]의 길이 ≤ 10
2 ≤ callings의 길이 ≤ 1,000,000
callings는 players의 원소들로만 이루어져 있습니다.
경주 진행중 1등인 선수의 이름은 불리지 않습니다.

<나의 정답>

화려한 나의 틀린 정답 !
import java.util.*;

class Solution {
    public String[] solution(String[] players, String[] callings) {
        // 선수 이름을 key로 하고 등수를 value로 하는 map
        Map<String, Integer> rankMap = new HashMap<>();
        for (int i = 0; i < players.length; i++) {
            rankMap.put(players[i], i);
        }

        for (String calling : callings) {
            int currentIdx = rankMap.get(calling);
            int prevIdx = currentIdx - 1;

            // 앞선 선수 이름
            String prevPlayer = players[prevIdx];

            // 자리 바꾸기 (배열 내에서)
            players[prevIdx] = calling;
            players[currentIdx] = prevPlayer;

            // map 정보도 업데이트
            rankMap.put(calling, prevIdx);
            rankMap.put(prevPlayer, currentIdx);
        }

        return players;
    }
}

- 문제 설명

문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s="banana"라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.
b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.
n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.
a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.
따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.
문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요.

- 제한사항
1 ≤ s의 길이 ≤ 10,000
s은 영어 소문자로만 이루어져 있습니다.

- 입출력 예
s	        result
"banana"	[-1, -1, -1, 2, 2, 2]
"foobar"	[-1, -1, 1, -1, -1, -1]

- 입출력 예 설명
입출력 예 #1
지문과 같습니다.
입출력 예 #2
설명 생략

class Solution {
    public int[] solution(String s) {
        int[] answer = new int[s.length()];
        
        for( int i=1; i< s.length(); i++){
            count =0;

함께 해봐요 ..

class Solution {
    public int[] solution(String s) {
        int[] answer = new int[s.length()];
        int[] lastIndex = new int[26]; // a-z 마지막 위치 저장
        Arrays.fill(lastIndex, -1); // 처음에는 모두 -1로 초기화
        //자바에서 배열의 모든 값을 지정한 값으로 초기화하는 메소드
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (lastIndex[c] == -1) {
                answer[i] = -1;
            } else {
                answer[i] = i - lastIndex[c];
            }
            lastIndex[c] = i; // 마지막 위치 갱신
        }
        return answer;
    }
}


오늘
** 내가 한 메뉴 수정, 삭제, 상세조회

package com.ohgiraffers.crud.menu.controller;

import com.ohgiraffers.crud.menu.model.dto.CategoryDTO;
import com.ohgiraffers.crud.menu.model.dto.MenuDTO;
import com.ohgiraffers.crud.menu.model.service.MenuService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/menu") //상위요청 menu
public class MenuController {

    private final MenuService menuService;

    public MenuController(MenuService menuService) {
        this.menuService = menuService;
    }

    @GetMapping("/list")
    public String findMenuList(Model model) {

        List<MenuDTO> menuList = menuService.findAllMenu();

//        for(MenuDTO menus : menuList) {
//            System.out.println(menus);
//        }

        model.addAttribute("menuList",menuList);

        return "menu/list";
    }

    @GetMapping("/result")
    public String selectMenu(Model model) {

        List<MenuDTO> menu = menuService.selectMenu();

        model.addAttribute("menu", menu);

        return "menu/result";
    }

    @GetMapping("/regist")
    public void registPage() {}

    @GetMapping(value = "category", produces = "application/json; charset=UTF-8")
    @ResponseBody
    public List<CategoryDTO> findCategoryList() {

//        menuService.findAllCategory().forEach(System.out::println);

        return menuService.findAllCategory();
    }

    @PostMapping("/regist")
    public String registMenu(MenuDTO newMenu, RedirectAttributes rttr) {

        menuService.registNewMenu(newMenu);

        rttr.addFlashAttribute("successMessage", "신규 메뉴 등록에 성공하셨음");

        return "redirect:/menu/list";
    }

    @GetMapping("/update")
    public void updatePage() {}

    @PostMapping("/update")
    public String updateMenu(MenuDTO newMenu, RedirectAttributes rttr) {

        menuService.updateMenu(newMenu);

        rttr.addFlashAttribute("successMessage","메뉴 수정에 성공하셨음");

        return "redirect:/menu/list";
    }

    @GetMapping("/delete")
    public void deletePage() {}

    @PostMapping("/delete")
    public String deleteMenu(MenuDTO newMenu, RedirectAttributes rttr) {

        menuService.deleteMenu(newMenu);

        rttr.addFlashAttribute("successMessage","메뉴 삭제에 성공하셨음");

        return "redirect:/menu/list";
    }

    @GetMapping("/select")
    public void selectPage() {}

    @PostMapping("/select")
    public String selectMenu(RedirectAttributes rttr, Model model, @RequestParam int code) {

        rttr.addFlashAttribute("successMessage","메뉴 상세 조회!");

        List<MenuDTO> menu = menuService.selectMenu(code);

        model.addAttribute("menu",menu);

        return "redirect:/menu/result";
    }

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<div th:include="common/header.html"></div>
<h3>메뉴 삭제삭제삭제</h3>
<form action="/menu/delete" method="post">
    <label>메뉴 코드 : </label><input type="number" name="code"><br>
    <input type="submit" value="전송">
</form>

<script>
    fetch("/menu/category")
        .then(res => res.json())
        .then(data => {
            console.log(data);

            const $categoryCode = document.getElementById("categoryCode");
            for(let index in data) {
                const $option = document.createElement('option');
                $option.value = data[index].code;
                $option.textContent = data[index].name;
                $categoryCode.appendChild($option);
            }
        });
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<div th:include="common/header.html"></div>
<h3>메뉴 수정</h3>
<form action="/menu/update" method="post">
  <label>메뉴 코드 : </label><input type="number" name="code"><br>
  <label>메뉴 이름 : </label><input type="text" name="name"><br>
  <label>메뉴 가격 : </label><input type="number" name="price"><br>
  <label>카테고리 코드 : </label>
  <select name="categoryCode" id="categoryCode"></select><br>
  <label>판매 상태 :</label>
  <select name="orderableStatus">
    <option value="Y">Y</option>
    <option value="N">N</option>
  </select>
  <input type="submit" value="전송">
</form>

<script>
  fetch("/menu/category")
          .then(res => res.json())
          .then(data => {
            console.log(data);

            const $categoryCode = document.getElementById("categoryCode");
            for(let index in data) {
              const $option = document.createElement('option');
              $option.value = data[index].code;
              $option.textContent = data[index].name;
              $categoryCode.appendChild($option);
            }
          });
</script>
</body>
</html>
