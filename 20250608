복습

250424교육일지

매일매일 JavaScript 3문제 풀기

문제 1
문장이 입력되면 거꾸로 출력하는 프로그램을 만들어 봅시다.

  입출력

  입력 : 거꾸로
  출력 : 로꾸거

나의 정답

console.log(["거","꾸","로"].reverse());
"로","꾸","거" 가 나올거고
console.log(["거","꾸","로"].reverse().join(''));
join을 사용해서 연결하면
로꾸거
=> spread 를 사용하여 거꾸로입력한 뒤 "거","꾸", "로" 뽑아내기

문제 2
유주는 놀이공원 아르바이트 중입니다. 그런데 놀이기구마다 키 제한이 있습니다.
유주가 담당하는 놀이기구는 키가 150cm 이상만 탈 수 있습니다.

입력으로 키가 주어지면
키가 150이 넘으면 YES를 틀리면 NO를 출력하는 프로그램을 작성하세요.

나의 정답

let input = 100;
if(input >= 150) {
    console.log('YES');
} else {
    console.log('NO');
}


문제 3

영하네 반은 국어, 수학, 영어 시험을 보았습니다. 영하는 친구들의 평균 점수를 구해주기로 했습니다.
공백으로 구분하여 세 과목의 점수가 주어지면 전체 평균 점수를 구하는 프로그램을 작성하세요. 
단, 소숫점 자리는 모두 버립니다.

입출력
입력 : 20 30 40
출력 : 30


let test = [100,20,50];
let sum = 
for (let i = 0; i<test.length; i++){
   점수 세개 입력하고 싶은걸 어떻게 표현하면 조을가요..
}

console.log(Math.floor(sum/3));
조금 더 생각해보기

let score1 = 20;
let score2 = 30;
let score3 = 30;

let avg = Math.floor((score1 + score2 + score3) / 3);
console.log(avg); (시은님 정답)

오늘 처음 java 배웠다
기초적인 내용들


public class Application1 {

    public static void main(String[] args) {

        /*comment. 여러 가지 값의 형태를 출력할 수 있다.*/
        //값 자체를 리터럴이라고 함

        /*comment. 숫자 형태의 값*/
        /*1-1. 정수 형태의 값 출력*/
        System.out.println(123);

        /*1-2. 실수 형태의 값 출력*/
        System.out.println(1.23);

        /*2. 문자 형태의 값 출력*/
        System.out.println('a'); //문자 형태의 값은 작은따옴표로 감싸줘야한다.
//        System.out.println('ab'); //두 개 이상은 문자로 취급하지 않기 때문에 에러가 발생한다.
//        System.out.println(''); //아무 문자도 기록되지 않는 경우도 에러가 발생한다.
        System.out.println('1'); //숫자 값이지만 작은따옴표로 감싸져있는 경우는 문자 '1'이라고 판단한다.

        /*3. 문자열 형태의 값 출력*/
        System.out.println("안녕하세요"); //문자열로 문자 여러 개가 나열된 형태를 말하며 쌍따옴표로 감싸주어야한다.
        System.out.println("123"); //정수지만 쌍따옴표로 감싸져 있기 때문에 문자열로 보아야한다.
//        System.out.println("a");
//        System.out.println("1");
        System.out.println("");
        System.out.println("a"); //한개의 문자도 쌍따옴표로 감싸면 문자열이다. 문자 a와 다르다

        /*4.논리 형태의 값 출력*/
        System.out.println(true);
        System.out.println(false);
    }
}


 public static void main(String[] args) {

        /*comment. 값을 직접 연산하여 출력할 수 있다.*/
        /* 이때 값의 형태에 따라 사용할 수 있는 연산자의 종류와 연산의 결과가 달라진다.*/

        /* 1. 숫자와 숫자의 연산 */
        /* 1-1. 정수와 정수의 연산 */
        System.out.println("======= 정수와 정수의 연산 =======");
        System.out.println(123+456);
        System.out.println(123-456);
        System.out.println(123*456);
        System.out.println(123/456);
        System.out.println(123%456); //나머지를 구하는 연산

        /* 1-2. 실수와 실수의 연산 */
        System.out.println("========실수와 실수의 연산======== ");
        System.out.println(1.23+1.23);
        System.out.println(1.23-0.23);
        System.out.println(1.23*10.0);
        System.out.println(1.23/10.0);
        System.out.println(1.23%1.0); //약간의 오차가 발생

        /* 1-3. 정수와 실수의 연산*/
        /*결과는 항상 실수가 나온다.*/
        System.out.println("=======정수와 실수의 연산=======");
        System.out.println(123+0.5);
        System.out.println(123-0.5);
        System.out.println(123*0.5);
        System.out.println(123/0.5);
        System.out.println(123%0.5);

        /*2. 문자의 연산 */
        /*2-1. 문자와 문자의 연산*/
        System.out.println("======문자와 문자의 연산=====");
        System.out.println('a'+'b');
        System.out.println('a'-'b');
        System.out.println('a'*'b');
        System.out.println('a'/'b');
        System.out.println('a'%'b'); //숫자이기 때문에 연산이 가능하다 숫자로 인식 가능

        /*2-2. 문자와 정수의 연산*/
        System.out.println("========문자와 정수의 연산========");
        System.out.println('a'+1);
        System.out.println('a'-1);
        System.out.println('a'*1);
        System.out.println('a'/1);
        System.out.println('a'%1);

        /*2-3.문자와 실수의 연산*/
        System.out.println("======문자와 실수의 연산 =======");
        System.out.println('a'+1.0);
        System.out.println('a'-1.0);
        System.out.println('a'*1.0);
        System.out.println('a'/1.0);
        System.out.println('a'%1.0);

        /*3.문자열의 연산*/
        /*3-1. 문자열과 문자열의 연산*/
        /*문자열과 문자열의 '+' 연산 결과 문자열 합치기(이어 붙이기)가 된다.*/
        System.out.println("========문자열과 문자열의 연산=======");
        System.out.println("hello"+"world");
//        System.out.println("hello"-"world");
//        System.out.println("hello"*"world");
//        System.out.println("hello"/"world");
//        System.out.println("hello"%"world"); //+제외하고 사용할 수 없다

        /*3-2. 문자열과 다른 형태의 값 연산 */
        /*문자열과의 연산은 '+' 연산만 가능하다*/
        /*3-2-1. 문자열과 정수의 연산*/
        System.out.println("helloworld" + 123); //+이외에는 사용 불가
        /*3-2-2. 문자열과 실수의 연산*/
        System.out.println("helloworld" + 0.123);
        /*3-2-3. 문자열과 문자의 연산*/
        System.out.println("helloworld" + 'a');
        /*3-2-4. 문자열과 논리값의 연산*/
        System.out.println("helloworld" + true);

        System.out.println("123"+"456"); //""로 감싸져 있기 때문에 문자열

        /*4. 논리값 연산 */
        /*4-1. 논리값과 논리값 연산 */
//        System.out.println(true + false);
//        System.out.println(true - false);
//        System.out.println(true * false);
//        System.out.println(true / false);
//        System.out.println(true % false);

        /*4-2. 논리값과 정수 연산*/
//        System.out.println(true+1);
//        /*4-3. 논리값과 실수 연산*/
//        System.out.println(true+1.0);
//        /*4-4. 논리값과 문자 연산*/
//        System.out.println(true+'a');
        /*4-5. 논리값과 문자열 연산*/
        System.out.println(true+"a"); //+만 사용 가능함 다른 연산자는 사용 불가 (문자열이라 사용 가능??)
        //문자열이라 이어붙이기 가능??
    }
}


public class Application3 {

    public static void main(String[] args) {

        /*comment. 문자열 합치기 결과를 예측하고 사용할 수 있다. */
        /*1. 두 개의 문자열 합치기 */
        System.out.println("======두 개의 문자열 합치기 =======");
        System.out.println(9+9);
        System.out.println("9"+9); //앞의 문자열 때문에 99구십구가 아니구 구구
        System.out.println(9+"9"); //문자열 만났으니까 구구
        System.out.println("9"+"9"); //문자열 구구

        /*세 개의 문자열 합치기*/
        System.out.println("======세 개의 문자열 합치기=====");
        System.out.println(9+9+"9"); //9+9숫자끼리 합쳐지고 문자열 "9"가 붙는 189 형태
        //'+' 연산 방향은 왼쪽에서 오른쪽이다.
        System.out.println(9+"9"+9); //구구구
        System.out.println("9"+9+9); //구구구

        System.out.println("9" + (9+9)); //먼저 연산하는 소괄호 이용하면 918 나옴

        /* 3. 문자열 합치기 응용*/
        System.out.println((10+20));
        System.out.println((10-20));
        System.out.println((10*20));
        System.out.println((10/20));
        System.out.println((10%20));

        System.out.println("=======결과 보기좋게 출력=======");
        System.out.println("10과 20의 합 : " + (10+20)); //소괄호 안쓰면 30 아니고  문자열이 합쳐져서 1020 도출
        System.out.println("10과 20의 차 : " + (10-20));
        System.out.println("10과 20의 곱 : " + (10*20));
        System.out.println("10과 20의 나누기 한 몫 : " + (10/20));
        System.out.println("10과 20의 나누기 한 나머지 : " + (10%20));
    }
}


public class Application1 {

    public static void main(String[] args) {

        /*comment. 변수의 사용 목적에 대해 이해할 수 있다. */
        /* 변수의 사용 목적
        * 1. 값에 의미를 부여하기 위한 목적(의미 전달이 쉬어야 코드 읽기 수월, 협업하거나 유지보수(코드 개선)에 유리하기 때문
        * 2. 한 번 저장해둔 값을 재사용 하기 위한 목적(값을 변경할 때도 보다 간편하게 변경할 수 있다.)
        * 3. 시간에 따라 변하는 값을 저장하고 사용할 수 있다.(변하는 값을 저장하기 위한 공간이 변수)
        * */

        /*1. 값에 의미를 부여하기 위한 목적*/
        System.out.println("보너스를 포함한 급여 : " + (1000000+20000)+"원");

        int salary = 1000000;
        int bonus = 20000;
        System.out.println("보너스를 포함한 급여 : " + (salary + bonus) + "원");

        /* 2. 한 번 저장해 둔 값을 재사용 하기 위한 목적 */
        System.out.println("1번 고객에게 포인트를 100포인트 지급하였습니다.");
        System.out.println("2번 고객에게 포인트를 100포인트 지급하였습니다.");
        System.out.println("3번 고객에게 포인트를 100포인트 지급하였습니다.");
        System.out.println("4번 고객에게 포인트를 100포인트 지급하였습니다.");

        int point = 100; //변수 지정하면 저장해둔 값 재사용 가능
        System.out.println("1번 고객에게 포인트를 " + point + "포인트를 지급하였습니다.");
        System.out.println("2번 고객에게 포인트를 " + point + "포인트를 지급하였습니다.");
        System.out.println("3번 고객에게 포인트를 " + point + "포인트를 지급하였습니다.");
        System.out.println("4번 고객에게 포인트를 " + point + "포인트를 지급하였습니다.");

        /*시간에 따라 변하는 값을 저장하고 사용할 수 있다. */
        /* 변수는 하나의 값을 저장하고 사용하기 위한 공간이기 보다, 변하는 값을 저장하는 공간 */
        int sum = 0; //변수 선언, 값을 할당 (선언과 동시에 초기화한다)

        sum = sum + 10;
        System.out.println("sum에 10을 더하면 현재 sum의 값은? : " + sum);

        sum = sum + 10;
        System.out.println(sum);

        sum = sum + 10;
        System.out.println(sum);
    }
}


public class Application2 {

    public static void main(String[] args) {

        /*comment. 변수를 선언하고 값을 할당하여 사용할 수 있다. */
        /* 변수를 사용하는 방법
        * 1. 변수를 준비한다. (선언)
        * 2. 변수에 값을 대입한다. (값 대입 및 초기화(값을 넣은 자체를 초기화라 함)
        * 3. 변수를 사용한다.
        * */

        /* 1-1. 변수를 선언하는 방법 */
        /* 자료형 변수명;*/

        /*자료형이란?
        * 다양한 값의 형태별로 어느 정도 크기를 하나의 값으로 취급할 것인지 미리 compiler와 약속한 키워드이다.
        * 예) 앞에서 사용한 int 자료형은 정수를 4byte만큼을 읽어서 하나의 값을 취급하겠다는 약속이다.
        * 이러한 자료형은 기본 자료형과 참조 자료형으로 나누어진다.
        * 그 중 기본자료형 8가지부터 살펴보자.
        * */

        /*1-1-1. 숫자를 취급하는 자료형*/
        /*정수를 취급하는 자료형은 4가지가 있다.*/
        byte bnum; //1byte
        short snum; //2byte
        int inum; //4byte
        long lnum; //8byte

        /*실수를 취급하는 자료형은 2가지가 있다. */
        float fnum; //4byte
        double dnum; //8byte

        /*1-1-2. 문자를 취급하는 자료형*/
        /* 문자를 취급하는 자료형은 1가지가 있다. */
        char ch; //2byte만큼 저장시킬 수 있
        char ch2;

        /* 1-1-3. 논리값을 취급하는 자료형*/
        boolean isTrue; //1byte

        /* 이상 8가지를 기본자료형이라고 한다.*/

        /* 1-1-4. 문자열을 취급하는 자료형 */
        String str; //4byte

        /* 2. 변수에 값을 대입한다. (값 대입 및 초기화)*/
        /* 2-1. 정수를 취급하는 자료형에 값 대입*/
        bnum = 1;
        snum = 2;
        inum = 4;
        lnum = 8L; //long type은 대문자 L명시적으로 소문자 l써도 되지만 혼선!!

        /*2. 실수를 취급하는 자료형에 값 대입 */
        fnum = 4.0f; //float는 뒤에 소문자 f를 붙여줘야함 실수뒤에 소문자 쓰는게 일반적 대문자도 가능
        dnum = 8.0;

        /* 2-3. 문자를 취급하는 자료형에 값 대입*/
        ch = 'a';
        ch2 = 97; //숫자로도 저장할 수 있다.

        /*2-4. 논리를 취급하는 자료형에 값 대입*/
        isTrue = true;
        isTrue = false;

        /*2-5. 문자열을 취급하는 자료형에 값 대입*/
        str = "안녕하세요";

        /* comment.
        * 숫자로 된 형태의 값을 그대로 사용하는 자료형은 byte, short, int, double이다.
        * 일반적으로 사용하는 값을 독특한 형태가 아닌 일반적인 형태로 사용할 수 있는 자료형을 대표자료형이라고 하며
        * 정수형 int가 대표 자료형, 실수형은 double이 대표 자료형이다. 제일 많이 쓴다는 뜻*/

        /* 선언과 동시에 초기화 */
        int point = 100;
        int bonus = 10;

        /*3. 변수를 사용한다. */
        /*3-1. 변수에 저장한 값 출력하기*/
        System.out.println("bnum = " + bnum); //단축기 soutv
        System.out.println("snum = " + snum);
        System.out.println("fnum = " + fnum);
        System.out.println("lnum = " + lnum);

        System.out.println("fnum = " + fnum);
        System.out.println("dnum = " + dnum);

        System.out.println("ch = " + ch);
        System.out.println("ch2 = " + ch2);

        System.out.println("isTrue = " + isTrue);

        System.out.println("str = " + str);

        /* 3-2. 변수를 이용해서 연산하기 */
        System.out.println("포인트와 보너스의 합은? : " +(bonus + point));

        /*3-3. 대입 연산자의 왼쪽과 오른쪽 편에 사용하기 (= 기준으로)*/
        point = point + 100;
    }
}


public class Application3 {

    public static void main(String[] args) {

        /*comment. 변수의 명명 규칙에 대해 이해할 수 있다. */

        /* 필기.
         * 변수의 명명 규칙
         * 변수의 이름을 지을 때 아무렇게나 짓는 것이 아닌 정해진 규칙이 있다.
         * 실무적으로는 굉장히 중요하기 때문에 반드시 숙지해야하고,
         * 또한, 규칙에 맞는 올바른 변수명을 짓는 것이 좋은 프로그래밍을 하는 첫 단추이다.
         * */

        /* 필기.
         * 변수의 명명규칙
         * 1. 컴파일 에러를 발생시키는 규칙
         *  1-1. 동일한 범위 내에서 동일한 변수명을 가질 수 없다.
         *  1-2. 예약어(ex true...)는 사용이 불가능하다. (자바에서 미리 사용하겠다고 compiler와 약속한 키워드를 예약어라고 한다.)
         *  1-3. 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 엄격하게 구분하는 언어이다.)
         *  1-4. 변수명은 숫자로 시작할 수 없다. (시작만 할 수 없고 숫자를 섞어서 사용하는 것은 가능하다.)
         *  1-5. 특수기호는 '_'와 '$'만 사용 가능하다. (따라서 공백을 사용할 수 없다.)
         *
         * 2. 컴파일 에러를 발생시키지는 않지만 개발자들끼리의 암묵적인 규칙
         *  2-1. 변수명의 길이 제한은 없다. (하지만 적당히 해야한다.)
         *  2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다. (camel-case)(합성어 중간 대문자로 시작)
         *  2-3. 단어와 단어 사이의 연결을 언더스코어(_ 상수 쓸때만)로 하지 않는다.
         *  2-4. 한글로 변수명을 짓는 것이 가능하지만, 권장하지 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 에러를 유발할 수 있다.)
         *  2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다.
         *  2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다.
         *  2-7. 명사형으로 작성할 수 있도록 한다.
         *  2-8. boolean형은 의문문으로 가급적 긍정형태로 네이밍한다.
         * */

        /*1. 컴파일 에러를 발생시키는 규칙*/
        /*  1-1. 동일한 범위 내에서 동일한 변수명을 가질 수 없다.*/
        int age = 20;
//        int age =30;

        /*1-2. 예약어는 사용이 불가능하다. (자바에서 미리 사용하겠다고 compiler와 약속한 키워드를 예약어라고 함*/
//        int true =1;
//        int for=20;

        /*  1-3. 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 엄격하게 구분하는 언어이다.)*/
        int Age=20; //위에서 만든 age 다른 것으로 취급한다
        int True = 10; // 예약어 true와 다른 것으로 취급한다.

      /*  1-4. 변수명은 숫자로 시작할 수 없다. (시작만 할 수 없고 숫자를 섞어서 사용하는 것은 가능하다.)*/
//        int 1age = 20;
        int age1 = 20;

//        1-5. 특수기호는 '_'와 '$'만 사용 가능하다. (따라서 공백을 사용할 수 없다.)
//        int sh@rp = 20;
        int _age = 20; //처음도 가능하고 중간이나 끝에도 가능
        int $harp = 20; //$도 사용가능


        /* 2. 컴파일 에러를 발생시키지는 않지만 개발자들끼리의 암묵적인 규칙 */

        /*  2-1. 변수명의 길이 제한은 없다. (하지만 적당히 해야한다.) */
        int afsdjaijoijdwjifoi;
        /*  2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다. (camel-case) */
        /*자바에서는 클래스명만 유일하게 대문자로 시작한다.*/
        int maxAge = 20;
        /*  2-3. 단어와 단어 사이의 연결을 언더스코어(_)로 하지 않는다. */
        String user_name; //에러가 발생하진 않음
        String userName; //올바른 표현
        /*  2-4. 한글로 변수명을 짓는 것이 가능하지만, 권장하지 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 에러를 유발할 수 있다.) */
        int 나이;
        /*  2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다. */
        String s;
        String name; //문자열 형태에 이름이 저장되겠구나~ 하고 짐작됨
        /*  2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다. */
        int sum = 0;
        int max = 10;
        int min = 0;
        int count = 1;

        /*  2-7. 명사형으로 작성할 수 있도록 한다. */
        String goHome; //가능하긴 하지만
        String home; //가급적 명사형으로 짓는다
        /*  2-8. boolean형은 의문문으로 가급적 긍정형태로 네이밍한다. */
        boolean isAlive = true;
        boolean isDead = false; //부정형보다는 긍정형이 더 나은 방식이다.
    }
}
