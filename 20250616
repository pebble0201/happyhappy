250616 교육일지

오늘은 security
web, dev, thymeleaf, mybatis, mysql dependencies 추가

Spring Security는 스프링 기반 애플리케이션의 보안(인증과 권한, 인가 등)을
담당하는 스프링 프레임워크이다.
Security는 인증과 권한에 대한 부분을 Filter의 흐름에 따라서 처리를 하며, 보
안과 관련된 옵션을 체계적으로 제공하므로 개발자가 일일이 보안과 관련된 로직
을 작성하지 않아도 되는 장점을 가지고 있다. 

1. 사용자의 로그인 요청
2. AuthenticationFilter에서 사용자의 아이디와 비밀번호를 기반으로
UserPasswordAuthentiactionToken 발행
3. 생성된 AuthenticationManager에 전달
4. AuthenticationManager 등록된 AuthenticationProvider에 사용자 정보 조회 요청
01. SpringSecurity architecture 2
5. UserDetailsService에서 사용자의 정보를 조회하고, UserDetails에 정보를 저장하여
반환
6. 조회 시 입력된 username을 기반으로 조회
7. AuthenticationProvider에 조회된 사용자의 username, password를 비교
8. 일치하는 경우 AuthenticationManager에 객체 반환
9. 해당 인증 정보를 SecurityContextHolder에 저장

package com.ohgiraffers.sessionsecurity.auth.controller.model.service;

import com.ohgiraffers.sessionsecurity.auth.controller.model.AuthDetails;
import com.ohgiraffers.sessionsecurity.user.model.dto.LoginUserDTO;
import com.ohgiraffers.sessionsecurity.user.model.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Objects;

@Service //사용자가 있는지 조회하는 역할
public class AuthService implements UserDetailsService {

    @Autowired
    private UserService userService;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

        LoginUserDTO login = userService.findByUsername(username);

        if(Objects.isNull(login)) {
            throw new UsernameNotFoundException("해당하는 회원 정보가 존재하지 않습니다.");
        }

        return new AuthDetails(login);
    }
}

package com.ohgiraffers.sessionsecurity.auth.controller.model;


import com.ohgiraffers.sessionsecurity.auth.controller.model.service.AuthService;
import com.ohgiraffers.sessionsecurity.user.model.dto.LoginUserDTO;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class AuthDetails implements UserDetails {

    private LoginUserDTO loginUserDTO;

    public AuthDetails() {}

    public AuthDetails(LoginUserDTO loginUserDTO) {
        this.loginUserDTO = loginUserDTO;
    }

    public LoginUserDTO getLoginUserDTO() {
        return loginUserDTO;
    }

    @Override
    public String toString() {
        return "AuthDetails{" +
                "loginUserDTO=" + loginUserDTO +
                '}';
    }

    public void setLoginUserDTO(LoginUserDTO loginUserDTO) {
        this.loginUserDTO = loginUserDTO;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true; //만료됨(false)
    }

    @Override
    public boolean isAccountNonLocked() {
        return true; //false걸면 계정잠금
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true; //해야 계정 사용 가능
    }

    @Override
    public boolean isEnabled() {
        return true; //
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {

        Collection<GrantedAuthority> authorities = new ArrayList<>();
        loginUserDTO.getRole().forEach(role -> authorities.add(()-> role));

        return authorities;
    }

    @Override
    public String getPassword() {
        return loginUserDTO.getPassword();
    }

    @Override
    public String getUsername() {
        return loginUserDTO.getUserName();
    }
}

package com.ohgiraffers.sessionsecurity.auth.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/auth")
public class AuthController {

    @GetMapping("/login")
    public void login() {}

    @GetMapping("/fail")
    public ModelAndView loginFail(ModelAndView mv, @RequestParam String message) {

        mv.addObject("message", message);
        mv.setViewName("/auth/fail");
        return mv;
    }

}

package com.ohgiraffers.sessionsecurity.auth.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/auth")
public class AuthController {

    @GetMapping("/login")
    public void login() {}

    @GetMapping("/fail")
    public ModelAndView loginFail(ModelAndView mv, @RequestParam String message) {

        mv.addObject("message", message);
        mv.setViewName("/auth/fail");
        return mv;
    }

}

package com.ohgiraffers.sessionsecurity.common;

public enum UserRole {//열거타입 상수의 집합 enum

    USER("USER"),
    ADMIN("ADMIN");

    private String role;

    UserRole(String role) {
        this.role = role;
    }

    public String getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "UserRole{" +
                "role='" + role + '\'' +
                '}';
    }
}

package com.ohgiraffers.sessionsecurity.config.handler;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.InternalAuthenticationServiceException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

import java.io.IOException;
import java.net.URLEncoder;

@Configuration
public class AuthFailHandler extends SimpleUrlAuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {

        String errorMessage = "";

        if(exception instanceof BadCredentialsException) {
            errorMessage = "아이디가 존재하지 않거나 비밀번호가 일치하지 않습니다.";

        } else if (exception instanceof InternalAuthenticationServiceException) {
            errorMessage = "서버에서 오류가 발생하였습니다. 관리자에게 문의해주세요.";

        } else if (exception instanceof UsernameNotFoundException) {
            errorMessage = "존재하지 않는 id입니다.";

        } else if(exception instanceof AuthenticationCredentialsNotFoundException) {
            errorMessage = "인증 요청이 거부되었습니다";

        } else {
            errorMessage = "알 수 없는 오류로 로그인 요청을 처리할 수 없습니다.";
        }

        errorMessage = URLEncoder.encode(errorMessage, "UTF-8");


        setDefaultFailureUrl("/auth/fail?messaege = " + errorMessage);

        super.onAuthenticationFailure(request, response, exception);
    }
}

package com.ohgiraffers.sessionsecurity.config;

import org.apache.ibatis.annotations.Mapper;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@MapperScan(basePackages = "com.ohgiraffers.sessionsecurity", annotationClass = Mapper.class)
public class MybatisConfiguration {
}

package com.ohgiraffers.sessionsecurity.config;

import com.ohgiraffers.sessionsecurity.common.UserRole;
import com.ohgiraffers.sessionsecurity.config.handler.AuthFailHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

    @Autowired
    private AuthFailHandler authFailHandler;

    @Bean
    public PasswordEncoder passwordEncoder() {

        return new BCryptPasswordEncoder(); //얘를 bean으로 등록, 가장 많이 쓰는 비번 암호화 알고리즘 중 하나
    }

    @Bean
    public WebSecurityCustomizer webSecurityCustomizer() {
        return web -> web.ignoring()
                .requestMatchers(PathRequest.toStaticResources().atCommonLocations());
    }

    @Bean
    public SecurityFilterChain configure(HttpSecurity http) throws Exception {

        /* 요청에 대한 권한 체크 */
        http.authorizeHttpRequests( auth -> {
            auth.requestMatchers("/auth/login", "/user/signup", "/auth/fail", "/", "/main").permitAll(); //모든사용자 접근 가능하게 권한줌
            auth.requestMatchers("/admin/*").hasAnyAuthority(UserRole.ADMIN.getRole()); //저 url에 접근은 admin~ 권한 있는 경우에만
            auth.requestMatchers("/user/*").hasAnyAuthority(UserRole.USER.getRole());
            auth.anyRequest().authenticated(); //인증된 상태(로그인한 사용자만) 접근 가능하게 함

        }).formLogin( login -> {
            login.loginPage("/auth/login");
            login.usernameParameter("user");
            login.passwordParameter("pass");
            login.defaultSuccessUrl("/", true);
            login.failureHandler(authFailHandler);

        }).logout( logout -> {
            logout.logoutRequestMatcher(new AntPathRequestMatcher("/auth/logout"));
            logout.deleteCookies("JSESSIONID");
            logout.invalidateHttpSession(true);
            logout.logoutSuccessUrl("/");

        }).sessionManagement( session -> {
            session.maximumSessions(1);
            session.invalidSessionUrl("/");

        }).csrf( csrf -> csrf.disable()); //개발할때만 공격 적용 안되게..?

        return http.build();
    }
}


package com.ohgiraffers.sessionsecurity.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.ohgiraffers.sessionsecurity")
public class SpringConfiguration {
}


package com.ohgiraffers.sessionsecurity.user.controller;

import com.ohgiraffers.sessionsecurity.user.model.dto.SignupDTO;
import com.ohgiraffers.sessionsecurity.user.model.service.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/user")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/signup")
    public void signup() {}

    @PostMapping("/signup")
    public ModelAndView signup(ModelAndView mv, @ModelAttribute SignupDTO signupDTO) {

        int result = userService.regist(signupDTO); //수행 행수? 횟수? 라 int로 반환

        String message = "";

        if(result > 0) {
            message = "회원가입이 정성적으로 완료되었습니다.";
            mv.setViewName("auth/login");
        } else {
            message = "회원가입에 실패하였습니다.";
            mv.setViewName("user/signup");
        }

        mv.addObject("message", message);

        return mv;
    }
}

package com.ohgiraffers.sessionsecurity.user.model.dao;

import com.ohgiraffers.sessionsecurity.user.model.dto.LoginUserDTO;
import com.ohgiraffers.sessionsecurity.user.model.dto.SignupDTO;
import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface UserMapper {
    int regist(SignupDTO signupDTO);

    LoginUserDTO findByUserName(String username);
}

package com.ohgiraffers.sessionsecurity.user.model.dto;

import com.ohgiraffers.sessionsecurity.common.UserRole;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class LoginUserDTO implements java.io.Serializable {

    private int userCode;
    private String userId;
    private String userName;
    private String password;
    private UserRole userRole;

    public LoginUserDTO() {}

    public LoginUserDTO(int userCode, String userId, String userName, String password, UserRole userRole) {
        this.userCode = userCode;
        this.userId = userId;
        this.userName = userName;
        this.password = password;
        this.userRole = userRole;
    }

    public int getUserCode() {
        return userCode;
    }

    public void setUserCode(int userCode) {
        this.userCode = userCode;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public UserRole getUserRole() {
        return userRole;
    }

    public void setUserRole(UserRole userRole) {
        this.userRole = userRole;
    }

    @Override
    public String toString() {
        return "LoginUserDTO{" +
                "userCode=" + userCode +
                ", userId='" + userId + '\'' +
                ", userName='" + userName + '\'' +
                ", password='" + password + '\'' +
                ", userRole=" + userRole +
                '}';
    }

    public List<String> getRole() {

        if(this.userRole.getRole().length() > 0 ){
            return Arrays.asList(this.userRole.getRole().split(","));
        }

        return new ArrayList<>();
    }
}


package com.ohgiraffers.sessionsecurity.user.model.dto;

public class SignupDTO implements java.io.Serializable {//직렬화

    private String userId;
    private String userName;
    private String userPass;
    private String role;

    public SignupDTO() {}

    public SignupDTO(String userId, String userName, String userPass, String role) {
        this.userId = userId;
        this.userName = userName;
        this.userPass = userPass;
        this.role = role;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserPass() {
        return userPass;
    }

    public void setUserPass(String userPass) {
        this.userPass = userPass;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    @Override
    public String toString() {
        return "SignupDTO{" +
                "userId='" + userId + '\'' +
                ", userName='" + userName + '\'' +
                ", userPass='" + userPass + '\'' +
                ", role='" + role + '\'' +
                '}';
    }
}


package com.ohgiraffers.sessionsecurity.user.model.service;

import com.ohgiraffers.sessionsecurity.user.model.dao.UserMapper;
import com.ohgiraffers.sessionsecurity.user.model.dto.LoginUserDTO;
import com.ohgiraffers.sessionsecurity.user.model.dto.SignupDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Objects;

@Service
public class UserService {

    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private UserMapper userMapper;

    public int regist(SignupDTO signupDTO) {

        signupDTO.setUserPass(passwordEncoder.encode(signupDTO.getUserPass()));
        //origin가져와서 inject pE

        int result = 0;

        try {
            result = userMapper.regist(signupDTO); //필드주입받아야 userMapper
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    public LoginUserDTO findByUsername(String username) {
        LoginUserDTO login = userMapper.findByUserName(username);

        if(!Objects.isNull(login)) {
            return login;
        } else {
            return null;
        }
    }
}

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.sessionsecurity.user.model.dao.UserMapper">

    <resultMap id="login" type="com.ohgiraffers.sessionsecurity.user.model.dto.LoginUserDTO">
        <id property="userCode" column="USER_NO"/>
        <result property="userId" column="USER_ID"/>
        <result property="userName" column="USER_NAME"/>
        <result property="password" column="PASSWORD"/>
        <result property="userRole" column="USER_ROLE"/>
    </resultMap>

    <insert id="regist" parameterType="com.ohgiraffers.sessionsecurity.user.model.dto.SignupDTO">
        INSERT INTO TBL_USER
        (
        USER_ID,
        USER_NAME,
        PASSWORD,
        USER_ROLE
        )
        VALUES
        (
        #{ userId },
        #{ userName },
        #{ userPass },
        #{ role }
        )
    </insert>

    <select id="findByUserName" resultMap="login">
        SELECT
        USER_NO, USER_ID, USER_NAME, PASSWORD, USER_ROLE
        FROM TBL_USER
        WHERE USER_ID = #{ username }
    </select>
</mapper>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>★★★★★★★admin page★★★★★★★</h1>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<script>
    alert(`[[${ message }]]`);

    window.location.replace("/auth/login");
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>로그인</h1>
<form th:action="@{/auth/login}" th:method="post">
    ID: <input type="text" name="user"><br>
    PWD: <input type="password" name="pass"><br>
    <button>로그인</button>
</form>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script>
        const message = `[[${ message }]]`; //인라인스케이트(gr).....!?!?
        if(message) {
            alert(message)
        }
    </script>
</head>
<body>
<h1>회원가입</h1>
<form th:action="@{/user/signup}" th:method="post">
    ID: <input type="text" name="userId"><br>
    이름: <input type="text" name="userName"><br>
    PWD: <input type="password" name="userPass"><br>
    권한:
    <select name="role">
        <option value="USER">일반회원</option>
        <option value="ADMIN">관리자</option>
    </select><br>
    <button>회원가입</button>
</form>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>★★★★★★★user page★★★★★★★</h1>
</body>
</html>

<!DOCTYPE html>
<html xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <meta charset="UTF-8">
    <title>Spring Security Login</title>
</head>
<body>
<h1>Security Login</h1>
<div sec:authorize="hasAnyAuthority('ADMIN')">
    <h1>=======관리자 페이지=======</h1>
</div>

<div sec:authorize="hasAnyAuthority('USER')">
    <h1>======회원 페이지=======</h1>
</div>

<div>
    <h1>Login</h1>
    <a href="auth/login">로그인</a>
    <a href="user/signup">회원가입</a>
    <form th:action="@{/auth/logout}" th:method="post">
        <button>로그아웃</button>
    </form>
</div>

<a href="admin/page"> 관리자 페이지 </a>
<br>
<a href="user/page"> 회원 페이지 </a>
</body>
</html>


spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/login
    username: ohgiraffers
    password: ohgiraffers

mybatis:
  mapper-locations: mapper/**/*.xml
