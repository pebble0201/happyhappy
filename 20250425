250425교육일지


상수는 변하지 않는 값 즉, 항상 고정된 값을 저장해두기 위한 메모리 상의 공간을 상수라고 한다. 상수의 사용방법은 상수를 선언하고 
이 때 final 키워드를 사용해야 한다. 그 다음 값을 초기화 하고 초기화 한 후에는 값 변경이 불가능하다. 
마지막으로 필요한 위치에 상수를 호출해서 사용하면 된다.
증감 연산자, 비교 연산자, 논리 연산자, 삼항 연산자에 대해 깊이 공부했다.
다양한 방법으로 활용하여 예시들을 보았다. 
오버플로우에서 범위를 벗어난 계산은 오버플로우를 발생시켜 원하지 않은 결과가 나올 수 있다. 
예를 들면 자료형에서 int가 long보다 작은 값을 저장하는데 이때 long을 int에 담으면 오류가 발생할 수도 있다는 것이다.
이와 반대로 언더 플로우는 최소 범위보다 작은 수를 발생시키는 경우이다.
그리고 묵시적 형변환과 명시적 형변환이 있는데 묵시적 형변환은 컴파일러가 자동으로 수행해주는 타입 변환이고
명시적 형변환은 형변환 연산자를 이용해 강제적으로 수행하는 형변환이다.
다른 말로 각각 자동형변환과 강제형변환이라고도 한다.
논리형은 형변환 규칙에서 제외된다.
메소드는 어떤 특정 작업을 수행하기 위한 명령문의 집합이라고 할 수 있는데,
메소드를 호출하는 방법은 
클래스명 사용할 이름 = new 클래스명(); => 이 형태로 객체가 생성된다.
그리고 
사용할 이름.메소드명(); 순서로 작성하면 메소드가 호출된다.

오늘 푼 3문제

문제1.
공백으로 구분하여 두 숫자 a와 b가 주어지면, a의 b승을 구하는 프로그램을 작성하세요.

나의 정답

// 랜덤 숫자로 변수를 선언
let a = 3;
let b = 5;

let result = 1; 초기화 할 때 곱셈이라 1로 한 것
let i = 0; //

if (i + 1 < b) {
result = a * a;  // 같은 값 두 번 곱하기
i *= 2;…?? 
}


문제 2.

공백으로 구분하여 두 숫자가 주어집니다.
두번째 숫자로 첫번째 숫자를 나누었을 때 그 몫과 나머지를 공백으로 구분하여 출력하세요.

입출력

입력 : 10 2
출력 : 5 0

나의 정답

let input1 = "1 2";

let [a, b] = input1.split(' ').map(Number);

console.log(a);
console.log(b)

let result =Math.floor(a / b);

let result2 = a % b;

console.log(`${result} ${result2}`);


문제 3.

민지는 국제 포럼에서 아르바이트를 하게 되었습니다. 민지는 각 국에서 온 참가자들의 명단을 엑셀로 정리하고 있는데 참가자들 이름이 어떤 이는 전부 소문자, 어떤 이는 전부 대문자로 써져 있는 등 형식이 제각각이었습니다.

민지를 위해 이름이 입력되면 전부 대문자로 출력되는 프로그램을 만들어주세요.

입출력

입력 : mary
출력 : MARY

나의 정답
-대문자만 쓸 수 있게 하는 방법과 대문자로 출력할 수 있는 방법을 써보았다.

1)대문자만 쓸 수 있는 방법

<style>
	#name {
            text-transform: uppercase;
        }
</style>
  <label>이름 : </label><input type="text" id="name"><br>


2)대문자로 출력할 수 있는 방법

let name = prompt("이름을 입력하세요:");
let upperName = name.toUpperCase();

console.log(upperName);



오늘 배운 것

package com.ohgiraffers.section03.constant;

public class Application1 {
    public static void main(String[] args) {


        /*comment. 상수에 대해 이해하고 사용할 수 있다. */
        /* 상수란?
        * 변수가 메모리에 변경될 값을 저장하기 위한 공간을 나타낸다면,
        * 상수는 이와 상반되는 개념이다.
        * 변하지 않는 값을(항상 고정된 값을) 저장해두기 위한 메모리 상의 공간을 상수라고 한다.
        *
        * 상수의 사용 목적
        * 변경되지 않는 고정된 값을 저장할 목적으로 사용한다.
        * 초기화 이후 값 대입 시 컴파일 에러를 발생시켜 값이 수정되지 못하도록 한다.
        *
        * 사용방법
        * 1. 상수를 선언한다.(변수 선언과 유사하지만 final 키워드를 사용함)
        * 2. 값을 초기화한다. (초기화 이후에는 값 변경이 불가능함)
        * 3. 필요한 위치에 상수를 호출해서 사용한다.
        * */

        final int AGE;
        AGE = 20; //20으로 초기화했다면
//        AGE = 30; //20으로 초기화했다면 또 할 수 없음

        /* 출력 구문에서 사용 */
        System.out.println(AGE);

        /*대입 연산자 시 활용*/
        int sum = AGE; // 대입연산자의 오른편에는 기술할 수 있음
//        int AGE = AGE + 10 ;; // 대입연산자의 왼쪽 편에는 쓸 수 없음
    }
}


package com.ohgiraffers.section03.constant;

public class Application2 {

    public static void main(String[] args) {

        /*comment. 상수의 명명 규칙에 대해 이해할 수 있다. */
        /* 상수의 명명 규칙은 변수의 명명규칙과 컴파일 에러를 발생시키는 규칙은 동일하다.
        *단, 개발자들끼리의 암묵적인 규칙에서 일부 차이를 보인다.
        * 1. 모든 문자는 영문자 대문자 혹은 숫자만 사용한다.
        * 2. 단어와 단어 연결사이를 변수에서는 카멜케이스,
        *    상수는 언더 스코어(_) 사용한다.
        * */

        final int AGE1 = 20;
        final int AGE2 = 30;
//        final int age3 = 40; //변수와 구분하기 힘들어 쓰지 않는게 좋음 (소문자로 사용 가능하긴 함)

        final int MAX_AGE = 60;
        final int MIN_AGE = 20;
        final int minAge = 30; //에러가 발생하지는 않지만 역시 변수와 구분하기 힘들다.
    }
}


package com.ohgiraffers.section04.overflow;

public class Application1 {

    public static void main(String[] args) {

        /*comment. 오버플로우에 대해 이해할 수 있다.
        * 자료형 별 값의 최대 범위를 벗어나는 경우
        * 발생한 carry를 버림처리하고 sign bit를 반전시켜 최솟값으로 순환시킴
        * */

        /* 오버플로우 면접질문~ */
        byte num1 =127;

        System.out.println("num1 = " + num1); //byte의 최대 저장 범위

        num1++; //1을 증가시켜봄

        System.out.println("num1 = " + num1); //byte의 최소 저장 범위

        /*언더플로우*/
        /*오버플로우와 반대 개념으로 최소 범위보다 작은 수를 발생시키는 경우
        * 언더플로우가 발생한다.*/

        byte num2 = -128; //최소 최대 저장범위가 의미하는게??
        System.out.println("num2 = " + num2); //byte의 최소 저장 범위

        num2--;

        System.out.println("num2 = " + num2); //byte의 최대 저장 범위

        int firstNum = 1000000; //int 21억정도 저장
        int secondNum = 700000;

        //범위를 벗어난 계산은 오버플로우를 발생시켜 원하지 않는 결과가 나올 수도 있다.
        int multi = firstNum*secondNum; //7천억이 나와야함(21억을 넘어가는)
        System.out.println("multi = " + multi);

        /*해결 방법*/
        long longMulti = firstNum*secondNum;
        System.out.println("longMulti = " + longMulti);

        /* 이미 오버플로우 처리 된 결과를 가지고 변수에 담았기 때문에 다르지 않은 결과가 출력된 것을 확인
        * 계산이 처리되기 전에 long 타입으로 자료형을 변경해주어야 한다 (강제 형변환을 이용했다고 함)
        * */
        long result = (long) firstNum*secondNum;
        System.out.println("result = " + result);
    }
}


package com.ohgiraffers.section05.typecasting;

public class Application1 {

    public static void main(String[] args) {

        /*comment. 자동 형변환 규칙에 대해 이해할 수 있다. */

        /*데이터 형변환이 필요한 이유 */
        /* - 자바에서 다른 타입끼리의 연산은 피연산자들이 모두 같은 타입인 경우 실행할 수 있다.
        *  - 즉, 같은 데이터 타입끼리만 연산을 수행할 수 있다.*/

        /* 형변환 종류와 규칙
        * 1. 자동형변환 (묵시적 형변환) : 컴파일러가 자동으로 수행해주는 타입 변환
        * 1-1. 작은 자료형에서 큰 자료형으로는 자동 형변환된다.
        * 1-2. 정수는 실수로 자동 형변환된다.
        * 1-3. 문자형은 int형으로 자동 형변환된다.
        * 1-4. 논리형은 형변환 규칙에서 제외된다.
        *
        * 2. 강제형변환 (명시적 형변환) : 형변환(cast) 연산자를 이용한 강제적으로 수행하는 형변환
        *2-1. 자동형변환이 적용되지 않는 경우 강제 형변환이 필요하다.
        * */

        /* 자동형변환 규칙 테스트 */
        /* 작은 자료형에서 큰 자료형으로 공간만 옮기는 경우 데이터 손실이 발생하지 않기 때문에 자동으로 처리해준다.*/

        /* 1-1-1. 정수끼리의 자동형변환*/
        byte bnum = 1;
        short snum = bnum;
        int inum = snum;
        long lnum = inum; //이런식으로 옮길 수 있다.

        int num1 = 10;
        long num2 = 20;
//        int result1 = num1 + num2; //컴파일에러 자동으로 큰쪽 자료형으로 변경해 계산하기 때문에 int에서 계산 불가
        // 자동으로 큰 쪽 자료형인 long으로 변경 후 계산하기 때문에 int형 변수에 값을 담을 수 없다.
        long result1 = num1+num2;

        System.out.println("result1 = " + result1);

        /* 1-1-2. 실수 끼리의 자동 형변환 */
        float fnum = 4.0f;
        double dnum = fnum;

        double result2 = fnum+dnum;
        System.out.println("result2 = " + result2);
        
        /*1-2. 정수는 실수로 자동 형변환 된다.*/
        /* 정수를 실수로 변경할 때 소숫점 자리가 없어도 실수형태로 표현이 가능하다.
        * 이때 데이터 손실이 없기 때문에 자동으로 형변환이 가능하다.*/
        
        long eight = 8L; //정수형에 8을 담고 명시적으로 L붙여주는게 좋음
        float four = eight; //정수형을 실수형에 담은

        System.out.println("four = " + four);

        float result3 = eight + four;
        System.out.println("result3 = " + result3); //실수형태

        /*1-3. 문자형은 int형으로 자동 형변환 된다. */
        char ch1 = 'a';
        int charNumber = ch1; //문자형은 자동으로 형변환

        System.out.println("charNumber = " + charNumber);

        /*1-4. 논리형은 형변환 규칙에서 제외된다. -> 어느 자료형이든 boolean을 형변환해서 담을 수 없다.*/
//        boolean isTrue = true; //초기화 해놓고
//        byte b = isTrue; //컴파일 에러가 남
//        short s = isTrue; ... 등 모든 자료형을 쓸 수 없다


    }
}


package com.ohgiraffers.section05.typecasting;

public class Application2 {

    public static void main(String[] args) {

        /* comment. 강제 형변환 규칙에 대해 이해할 수 있다. */
        /* 강제 형변환 : 바꾸려는 자료형으로 캐스트 연산자를 이용하여 형변환한다.
        * 예) (바꿀자료형) 값;
        * */

        /*자동형변환의 규칙의 반대 상황에서 강제 형변환이 필요하다.
        * 1. 강제 형변환 규칙
        * 1-1. 큰 자료형에서 작은 자료형으로 변경 시 강제 형변환이 필요하다.
        * 1-2. 실수를 정수로 변경할 때
        * 1-3. 문자형을 int미만 크기의 변수에 저장할 때
        * 1-4. 논리형은 강제형변환 규칙에서도 제외된다.
        * */

        //상담
        /* 1-1-1. 정수끼리의 강제 형변환 */
        long lnum = 8L;
//        int inum - lnum; //컴파일러가 데이터 손실가능성을 알려줌
        int inum = (int) lnum; //변경하려는 자료형을 명시하여 강제 형변환을 해야한다.

//        short snum = inum;
//        short snum = (short)inum;
//        byte bnum = (byte) snum;

        /* 1-1-2. 실수끼리의 강제 형변환*/
        double dnum = 8.0;
//        float fnum = dnum;
//        System.out.println("fnum = " + fnum);

        /* 1-2. 실수를 정수로 변경할 때 */
        float fnum2 = 4.0f;
//        long lnum2 = fnum2;
                long lnum2 = (long) fnum2;

        /*1-3. 문자형을 int미만 크기의 변수에 저장할 때 */
        char ch = 'a';
        byte bnum2 = (byte)ch;
        short snum2 = (short) ch;

        int num1 = 97;
        int num2 = -97;

        char ch2 = (char) num1;
        char ch3 = (char) num2;

        System.out.println("ch2 = " + ch2);
        System.out.println("ch3 = " + ch3);

        /* 1-4. 논리형 강제형변환 규칙에서도 제외된다. */
//        boolean isTrue = true;
//        byte b = (byte) isTrue; 등
    }
}

package com.ohgiraffers.section05.typecasting;

public class Application3 {

    public static void main(String[] args) {

        /*comment. 자동형변환과 강제형변환을 이용하여 서로 다른 자료형끼리 연산을 수행할 수 있다. */
        int inum = 10;
        long lnum = 100;

        /* 1. 두 수의 연산 결과를 int형으로 변환 후 int 자료형 변수에 리턴 받는다. */
//        int isum = inum + lnum;
        int isum = (int)(inum + lnum);

        /*2. long형 값을 int 강제 형변환 한다.*/
        int isum2 = inum + (int) lnum; //long 타입을 int형으로 바꾼 후 담겠다.

        /* 3. 결과 값을 long 형 자료형으로 받는다 (자동형변환 이용)*/
        long lsum = inum + lnum;

        /* 주의사항, int미만 연산의 처리 결과는 int형이다.*/
        byte byteNum1 = 1;
        byte byteNum2 = 2;
        short shortNum1 = 3;
        short shortNum2 = 4;

        int result1 = byteNum1 + shortNum2;
        int result2 = byteNum1 + shortNum1;
        int result3 = shortNum1 + byteNum1;
        int result4 = shortNum1 + shortNum1;

        System.out.println("result1 = " + result1);
        System.out.println("result2 = " + result2);
        System.out.println("result3 = " + result3);
        System.out.println("result4 = " + result4);
    }
}


package com.ohgiraffers.section05.typecasting;

public class Application4 {

    public static void main(String[] args) {

        /*comment. 형변환 시 주의할 점을 이해하고 사용할 수 있다.*/

        /*1.의도하지 않은 데이터 손실*/
        int inum = 290;
        byte bnum = (byte) inum; //데이터 손실 상관없으니 그냥 저장해줘

        System.out.println("inum = " + inum);
        System.out.println("bnum = " + bnum);

        /* 2. 의도한 데이터 손실 */
        double height = 175.5;
        int floorHeight = (int) height;

        System.out.println("height = " + height);
        System.out.println("floorHeight = " + floorHeight); //소수점 절식에 이용할 수 있다.
    }
}


package com.ohgiraffers.section03.increment;

public class Application1 {

    public static void main(String[] args) {

        /* comment. 증감연산자에 대해 이해하고 활용할 수 있다. */
        /* 증감연산자
        피연산자의 앞 or 뒤에 사용이 가능하다.
        '++' : 1 증가의 의미
        '--' : 1 감소의 의미
         */

        /* 1. 증감연산자를 단항으로만 사용 */
        /* 단항으로 사용될 때는 1 증가 혹은 1 감소(시켜라)의 의미를 가진다*/
        int num = 20;

        num++; //1증가

        ++num; // 1 증가

        num--; //1감소

        --num; //1감소

        /* 2. 증감연산자를 다른 연산자와 함께 사용*/
        /* 주의사항
        * 다른 연산자와 함께 사용 할 때 증감 연산자의 의미
        * '++var' : 피연산자의 값을 먼저 1을 증가시킨 후 그 다음 다른 연산을 진행함
        * 'var++' : 다른 연산을 먼저 진행하고 난 뒤 마지막에 피연산자의 값을 1 증가시킴
        * '--var' : 피연산자의 값을 먼저 1을 감소시킨 후 그 다음 다른 연산을 진행함
         * 'var--' : 다른 연산을 먼저 진행하고 난 뒤 마지막에 피연산자의 값을 1 감소시킴
        * */
        int firstNum = 20; //firstnum이라는 공간에 20을 담은

        int result1 = firstNum++ *3; //곱하기를 먼저 진행해서 60이 담긴 것
        System.out.println("result1 = " + result1);
        System.out.println("firstNum = " + firstNum); //이건 다시 이해 다른 연산 먼저 한 다음에

        int secondNum = 20;

        int result2 = ++secondNum *3;

        System.out.println("result2 = " + result2); //21*3 1 먼저 증가시킨 21에 *3한것
        System.out.println("secondNum = " + secondNum);
    }
}


package com.ohgiraffers.section04;

public class Application1 {

    public static void main(String[] args) {

        /*comment. 비교연산자에 대해 이해하고 활용할 수 있다. */
        /* 비교연산자는 피연산자 사이에서 상대적인 크기를 판단해서 참 혹은 거짓을 반환하는 연산자이다.
        * 연산자 중 참 혹은 거짓을 반환하는 연산자는 삼항연산자의 조건식이나 조건문의 조건절에 많이 사용된다.*/

        /* 비교연산자의 종류
        * '==' : 왼쪽의 피연산자와 오른쪽의 피연산자가 같을 때 true 다르면 false 반환하는 연산자
        * '!=' : 왼쪽의 피연산자와 오른쪽의 피연산자가 다를 때 true 같으면 false 반환하는 연산자
        * '>' : 왼쪽의 피연산자가 오른쪽의 피연산자보다 크면 true 작으면 false 반환하는 연산자
        * '>=' : 왼쪽의 피연산자가 오른쪽의 피연산자보다 크거나 같을 때 true 아니면 false 반환하는 연산자
        * '<' : 왼쪽의 피연산자가 오른쪽의 피연산자보다 작으면 true 아니면 false 반환하는 연산자
        * '<=' : 왼쪽의 피연산자가 오른쪽의 피연산자보다 작거나 같을 때 true 아니면 false 반환하는 연산자
        * */

        /* 숫자값 비교 - 정수 비교 */
        int inum1 = 10;
        int inum2 = 20;

        System.out.println(inum1 == inum2);
        System.out.println(inum1 != inum2); //다른지
        System.out.println(inum1 > inum2);
        System.out.println(inum1 >= inum2);
        System.out.println(inum1 < inum2);
        System.out.println(inum1 <= inum2); //boolean 값을 반환해줌

        /* 숫자값 비교 - 실수 비교 */
        double dnum1 = 10.0;
        double dnum2 = 20.0;

        System.out.println(dnum1==dnum2);
        System.out.println(dnum1!=dnum2);
        System.out.println(dnum1>dnum2);
        System.out.println(dnum1>=dnum2);
        System.out.println(dnum1<dnum2);
        System.out.println(dnum1<=dnum2);

        /* 문자 값 비교 */
        char ch1 = 'a';//97
        char ch2 = 'A';//65

        System.out.println(ch1==ch2);
        System.out.println(ch1!=ch2);
        System.out.println(ch1>ch2);
        System.out.println(ch1>=ch2);
        System.out.println(ch1<ch2);
        System.out.println(ch1<=ch2);

        /* 논리값 비교 */
        boolean bool1 = true;
        boolean bool2 = false;

        System.out.println(bool1==bool2);
        System.out.println(bool1!=bool2); // 이렇게 두개만 가능 대소 비교는 컴파일ㅇㅔ러발생

        /* 문자열 값 비교 */
        String str1 = "java";
        String str2 = "java";

        System.out.println(str1==str2);
        System.out.println(str1!=str2);
//        System.out.println(str1>=str2); // 대소 비교는 불가능

        int x = 10;
        int y = 11;

        boolean result = x <= y; //이런식으로 사용해서 반환을 받을 순 있음
    }
}


package com.ohgiraffers.section05.logical;

public class Application1 {

    public static void main(String[] args) {

        /* comment. 논리 연산자에 대해 이해하고 활용할 수 있다. */
        /*논리연산자의 종류
        * 1. 논리 연결 연산자 : 두 개의 피연산자를 가지는 이항 연산자이며,
        *                    연산자의 결합방향은 왼쪽에서 오른쪽으로 진행되는 연산자이다.
        *                    두개의 논리식이 있다면 판단해서 참과 거짓을 판단해주는 연산자
        *   1-1. &&(논리 AND) 연산자 : 두 개의 논리식 모두 참일 경우 참을 반환, 둘 중 한개라도 거짓인 경우 거짓을 반환한다.
        *   1-2. ||(논리 OR) 연산자 : 두 개의 논리식 중 하나라도 참일경우 참을 반환, 둘 다 거짓일 때는 거짓을 반환한다.
        *
        * 2. 논리 부정 연산자 : 피연산자가 하나면 단항연산자로, 피연산자의 결합 방향을 왼쪽에서 오른쪽이다.
        *   2-1. !(논리 NOT) 연산자 : 논리식의 결과가 참이면 거짓을, 거짓이면 참을 반환한다.
        * */

        /* 1. 논리 연산자 결과값 확인 */
        System.out.println(true && true);
        System.out.println(true && false);
        System.out.println(false && true);
        System.out.println(false && false);

        System.out.println(true || true);
        System.out.println(true || false);
        System.out.println(false || true);
        System.out.println(false || false);

        System.out.println(!true);
        System.out.println(!false);

        /* 2. 논리식에 논리연산자 활용 */
        int a = 10;
        int b = 20;
        int c = 30;
        int d = 40;

        System.out.println(a < b && c < d); //a가 b보다 작으면서 c가 d보다 작은지
        System.out.println(a < b && c > d);
        System.out.println(a > b && c < d);
        System.out.println(a > b && c > d);

        System.out.println(a < b || c < d);
        System.out.println(a < b || c > d);
        System.out.println(a > b || c < d);
        System.out.println(a > b || c > d);


    }
}


package com.ohgiraffers.section05.logical;

public class Application2 {

    public static void main(String[] args) {

        /* comment. 논리연산자의 우선순위에 대해 이해하고 활용할 수 있다. */
        /* 논리 연산자의 우선순위와 활용
        * && : 11 순위
        * || : 12순위
        * */

        /* 1. 1부터 100사이의 값인지 확인 */
        /* 1 <= 변수 <= 100 이렇게는 사용 못함 -> 변수 => 1 && 변수 <= 100 이렇게 사용해야함*/
        int num1 = 55; // 55는 1~100 사이에 있어 true
        System.out.println(num1 >= 1 && num1 <= 100);

        int num2 = 166;
        System.out.println(num2 >=1 && num2 <= 100);

        /* 2. 영어 대문자인지 확인 */
        char ch1 = 'G';
        System.out.println(ch1 >= 'A' && ch1 <= 'Z');

        char ch2 = 'g';
        System.out.println(ch2 >= 'a' && ch2 <= 'z');

        /*3. 대소문자 상관없이 영문자 y인지 확인*/
        char ch3 = 'Y';
        System.out.println(ch3 == 'y' || ch3 == 'Y');

        /* 4. 영문자인지 확인 */
        /* A : 65, Z : 90, a : 97, z : 122 */
        char ch5 = 'f';
        System.out.println(ch5 >= 97 && ch5 <= 122);
        System.out.println(ch5 >= 65 && ch5 <= 90);

        System.out.println((ch5 >= 'A' && ch5 <= 'Z') || (ch5 >= 'a' && ch5 <= 'z'));
        System.out.println((ch5 >= 97 && ch5 <= 122) || (ch5 >= 65 && ch5 <= 90));

        char ch6 = 'F';
        System.out.println(ch6 >= 65 && ch6 <= 90);
        System.out.println(ch6 >= 97 && ch6 <= 122);

    }
}


package com.ohgiraffers.section6.ternary;

public class Application1 {

    public static void main(String[] args) {

        /*comment. 삼항 연산자에 대해 이해하고 활용할 수 있다. */
        /* 자바에서 유일하게 피연산자 항목이 3개인 연산자이다.
        * 항목이 3개이다 : (조건식)? 참일 때 사용할 값 : 거짓일 때 사용할 값
        * 조건식은 반드시 결과가 true 또는 false가 나오게끔 작성해야 한다.
        * */

        /* 1. 삼항 연산자 단독 사용 */
        int num1 = 10;
        int num2 = -10;

        String result1 = (num1 > 0)? "양수다" : "양수가 아니다";
        String result2 = (num2 > 0)? "양수다" : "양수가 아니다";

        System.out.println("result1 = " + result1);
        System.out.println("result2 = " + result2);



        /* 1. 삼항 연산자 중첩 사용 */
        int num3 = 5;
        int num4 = 0;
        int num5 = -5;

        String result3 = (num3>0)? "양수다" : (num3 == 0)? "0이다" : "음수다";
        String result4 = (num4>0)? "양수다" : (num4 == 0)? "0이다" : "음수다";
        String result5 = (num5>0)? "양수다" : (num5 == 0)? "0이다" : "음수다";
        System.out.println("result3 = " + result3);
        System.out.println("result4 = " + result4);
        System.out.println("result5 = " + result5);
    }
}


package com.ohgiraffers.section01.method;

public class Application1 {

    public static void main(String[] args) {

        /* comment. 메소드의 호출 흐름에 대해 이해할 수 있다. */
        /* 메소드란?
        *  메소드 (method)는 어떤 특정 작업을 수행하기 위한 명령문의 집합이라고 할 수 있다.
        * */

        System.out.println("main() 시작됨...");

        /* 메소드 호출 방법
        * 클래스명 사용할 이름 = new 클래스명(); //객체 생성
        * 사용할 이름, 메소드명(); //메소드 호출
        *  */

        // 자기 부른 애에게 돌아가 (부른쪽으로 돌아가서 끝남)
        Application1 app1 = new Application1();
        app1.methodA(); //메소드a불렀음 a로 바로 가

        System.out.println("main() 종료됨..."); //마지막으로 main종료


    }

    public void methodA() {
        System.out.println("methodA() 호출함..."); //2. 구문 만나서 출력 됨

        methodB(); //B부르고 있음

        System.out.println("methodA() 종료됨..."); //남은 이거 출력, 얘 부른애 main

    }
    public void methodB(){
        System.out.println("methodB() 호출함..."); //3.출력

        methodC(); //C부름

        System.out.println("methodB() 종료됨..."); //mB나머지 출력 다시 돌아가 mA

    }
    public void methodC(){
        System.out.println("methodC() 호출함..."); //4.출력 끝나면 자신을 부른 애에게 돌아감 mB

        System.out.println("methodC() 종료됨..."); // 뭐 호출한게 없으니 mB에게 돌아가는 것
    }

    }


package com.ohgiraffers.section01.method;

public class Application2 {

    public static void main(String[] args) {

        System.out.println("main() 시작함...");

        Application2 app2 = new Application2();
        app2.methodA();
        app2.methodB();
        app2.methodC();

        System.out.println("main() 종료됨...");

    }
    public void methodA() {
        System.out.println("methodA() 호출됨...");
        System.out.println("methodA() 종료됨...");
    }

    public void methodB() {
        System.out.println("methodB() 호출됨...");
        System.out.println("methodB() 종료됨...");

    }

    public void methodC() {
        System.out.println("methodC() 호출됨...");
        System.out.println("methodC() 종료됨...");
    }
}


package com.ohgiraffers.section01.method;

public class Application3 {

    public static void main(String[] args) {

        /* comment. 메소드 전달 인자와 매개변수에 대해 이해하고 메소드를 호출 시 활용할 수 있다. */
        /* 전달인자(argument)와 매개변수(parameter)를 이용한 메소드 호출
        * 지금까지 우리가 배운 변수는 지역 변수에 해당한다.
        * */

        /* 변수의 종류
        * 1. 지역변수
        * 2. 매개변수
        * 3. 전역변수(필드)
        * 4. 클래스(static)변수
        * */

        /* 지역변수는 선언한 메소드 블럭 내부에서만 사용이 가능하다. 이것을 지역변수의 스코프라고 한다.
        * 다른 메소드간 서로 공유해야 하는 값이 존재하는 경우 메소드 호출 시 사용하는 괄호를 이용해서 값을 전달할 수 있다.
        * 이 때 전달하는 값을 전달인자라고 부르고,
        * 메소드선언부 괄호 안에 전달 인자를 받기 위해 선언하는 변수를 매개변수라고 부른다.
        * */
        Application3 app3 = new Application3(); //인스턴스화 하기 위해
        /* 1. 전달인자로 값 전달 테스트*/ //밖에 만드는 이것에 대한 설명 .,,,. 밖 ???
//        app3.testMethod(); //매개변수가 있는데 안쓰면 컴파일에러
          app3.testMethod(40);
//        app3.testMethod("40");
//        app3.testMethod((20,30,40));
//        app3.testMethod();

        /*2. 변수에 저장한 값 전달 테스트*/
        int age = 20;
        app3.testMethod(age); //위의 변수로 저장해도 제대로 동작 됨 변수 통해 값 넣어줄 수 있

        /*자동형 변환 이용하여 값 전달*/
        byte byteAge = 10;
        app3.testMethod(byteAge);

        /* 강제형변환 이용하여 값 전달 */
        long longAge = 80;
//        app3.testMethod(longAge); //왜 안된다고 ..???
        app3.testMethod((int) longAge);

        /* 연산 결과를 이용해서 값 전달 */
        app3.testMethod(age * 3);
    }

    public void testMethod(int age) {
        System.out.println("당신의 나이는 " + age + "세 입니다.");
    }
}


package com.ohgiraffers.section01.method;

public class Application4 {

    public static void main(String[] args) {

        /*comment. 여러 개의 전달 인자를 이용한 메소드를 호출할 수 있다.*/

        /* 1. 여러 개의 매개변수를 가진 메소드 호출 */
        Application4 app4 = new Application4();
        app4.testMethod("홍길동",20,'남');
//        app4.testMethod(20,'남',홍길동);
        //개수 맞아도 순서 일치하게 적어줘야함

        /*2. 변수에 저장된 값을 전달하며 호출할 수 있다. */
        String name = "유관순";
        int age = 20;
        char gender = '여'; //char형은 "" 못쓰는지?! 기억이 안납니다..
    }

     public void testMethod(String name, int age, final char gender) {
         System.out.println("당신의 이름은 " + name + "이고, 나이는 " +age +"세 이며, 성별은 " +gender + "입니다.");
     }
}


package com.ohgiraffers.section01.method;

public class Application5 {

    public static void main(String[] args) {

        /*comment. 메소드 리턴에 대해 이해할 수 있다. */
        /* return 이란?
        * 모든 메소드 내부에는 return; 이 존재한다.
        * void 메소드의 경우 return;을 명시적으로 작성하지 않아도 마지막 줄에 compiler?compile?컴파일러?가 자동으로 추가를 해준다.
        * return은 현재 메소드를 강제 종료하고 호출한 구문으로 다시 돌아가는 명령어이다.
        * */


        /* 1. 메소드 리턴 테스트*/
        Application5 app5 = new Application5();
        System.out.println("main() 메소드 시작함...");
        app5.testMethod(); //메소드호출

        System.out.println("main() 메소드 종료됨...");


    }
    public void testMethod() {
        System.out.println("testMethod() 동작 확인...");

        //가장 마지막에 리턴을 작성해야 하고 그렇지 않으면 컴파일 에러 발생
        return;
//        System.out.println("단순한 출력문..."); 리턴은 항상 맨 마지막에 얘를 마지막에 적을 수 없음

    }
}


package com.ohgiraffers.section01.method;

public class Application6 {

    public static void main(String[] args) {

        /*comment. 메소드 리턴값을 이해하고 활용할 수 있다. */
        /* 메소드 리턴값 테스트
        * 복귀를 할 때 그냥 복귀를 할 수도 있지만, 값을 가지고 복귀할 수도 있다.
        * 이 때 가지고 가는 값을 리턴값이라고 한다.
        * */
        Application6 app6 = new Application6();
        /*1. 메소드 리턴값 확인 */
        app6.testMethod();

        String returnText = app6.testMethod();//returnText라는 공간을 만들어두고 (변수에 저장해두고)
        System.out.println("returnText = " + returnText); //단순 호출한거

        System.out.println(app6.testMethod()); //이렇게 바로 출력 가능 출력하고 싶으면 출력문 써야함
    }

    public String testMethod() {

        /* public 뒤에 바로 return으로 가지고 갈 타입을 명시한다.
        * 아무것도 리턴하지 않는 경우 void, 값을 반환하는 경우에는 반환 값의 자료형을 작성해야 한다.
        * */
        return "hello world"; //메소드 호출하면 얘 돌려줄게
    }
}
