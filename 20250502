250502 교육일지

내가 직접 프로그램 설계하기

package com.ohgiraffers.section03.makingramen;

import java.util.Scanner;

public class Application {

    public static void main(String[] args) {

        /*프로그램 개요
        * 요리사가 라면을 끓이는 게임 프로그램
        *
        * 시스템 요구사항
        * 1. 요리사는 인덕션 전원 켜기, 물끓이기, 스프넣기, 면넣기, 인덕션 끄기를 할 수 있다.
        * 2. 라면은 고요하기, 끓기 시작, 완전 끓기, 끓는 것을 멈출 수 있다.
        * 3. 라면(을 끓이는 냄비는) 처음 고요한 상태로 있는다.
        * 4. 요리사가 먼저 인덕션 전원을 켠다. 이미 전원이 켜져있으면 다시 켤 수 없다.
        * 5. 요리사가 물을 끓이면 라면은 10도씨 씩 온도가 올라가며 끓기 시작한다.
        * 6. 스프를 넣으면 라면은 20도씨 올라간다.
        * 7. 면을 넣으면 라면은 5도씨 내려간다.
        * 8. 인덕션을 끄면 라면은 더 이상 끓지 않고 멈춘다.
        * 9. 라면을 끓이는 중에 인덕션을 끌 수 없다.
        *  */

        /* 프로그램 설계
        * 1. 필요한 객체
        * -사용자(플레이어), 요리사, 라면(냄비)
        *
        * 2. 객체간 상호작용
        * -요리사가 수신할 수 있는 메시지
        * 1)인덕션 전원 on
        * 2)스프 넣어라
        * 3)면 넣어라
        * 4)인덕션 전원 off
        *
        * -라면이 수신할 수 있는 메시지
        * 1)고요한 상태
        * 2)끓기 시작
        * 3)완전 끓기
        * 4)끓는 것 멈추기*/

        Cook cook = new Cook();

        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("맛있는 라면을 끓여보아요");
            System.out.println("1.인덕션 전원 켜기");
            System.out.println("2.잔잔한 수면");
            System.out.println("3.물 조용히 끓기");
            System.out.println("4.물 더 끓기");
            System.out.println("5.물 팔팔 끓기");
            System.out.println("6.인덕션 전원 끄기");
            System.out.println("8.끓는 것 멈추기");
            System.out.println("순서대로 번호를 입력해야해요");
            System.out.print("번호 입력 : ");
            int num = sc.nextInt();

        switch (num) {
            case 1 : cook.turnOn(); break;
            case 2 : cook.start(); break;
            case 3 : cook.put1(); break;
            case 4 : cook.put2(); break;
            case 5 : cook.turnOff(); break;
            case 7 :
                System.out.println("라면 완성"); break;
            default:
                System.out.println("잘못된 번호 선택"); break;
        }
        if(num == 8){
            break;
        }
        }
    }
}

<Ramen>

package com.ohgiraffers.section03.makingramen;

public class Ramen {

    private boolean isOn; //초기에는 전원 안켜진 false상태
    private int temper;

    public void turnOn() {
        if (isOn) {
            System.out.println("이미 전원이 켜져있음");
        } else {
            this.isOn = true;
            System.out.println("전원을 켰음 물 끓일 준비 완료");
        }
    }

    public void start() {
        if (isOn) {
            System.out.println("물이 끓기 시작");
            this.temper += 10;
            System.out.println("현재 물의 온도 : " + this.temper);
        } else {
            System.out.println("현재 물이 끓고 있지 않음 전원을 먼저 켜라");
        }
    }

    public void put1() {
        if (isOn) {
            if (this.temper >= 40) {
                System.out.println("스프 넣어");
                this.temper += 20;
            } else {
                System.out.println("불 세기를 올려");
            }
        }
    }
    public void put2() {
        if (isOn) {
            if(this.temper >= 80) {
                System.out.println("면 넣어");
                this.temper +=20;
            } else {
                System.out.println("불 세기를 더더 올려");
            }
        }
    }
    public void turnOff() {
        if(isOn) {
            if(this.temper > 100){
                System.out.println("이제 불을 꺼");
            } else {
                this.isOn = false;
                System.out.println("인덕션 전원 다시 켜");
            }
        } else {
            System.out.println("불 이미 꺼졌어 확인해");
        }
    }
}

<cook>

package com.ohgiraffers.section03.makingramen;

public class Cook {

    private final Ramen ramen = new Ramen();

    public void turnOn() {

        ramen.turnOn();
    }
    public void start() {

        ramen.start();
    }
    public void put1() {

        ramen.put1();
    }

    public void put2() {
        ramen.put2();
    }
    public void turnOff() {
        ramen.turnOff();
    }
}


package com.ohgiraffers.section02.encapsulation.problem1;

public class Application {

    public static void main(String[] args) {

        /* comment. 필드에 직접 접근하는 경우 발생할 수 있는 문제점을 이해할 수 있다.*/

        //필드에 올바르지 않은 값이 들어가도 통제가 불가능하다.

        Monster monster1 = new Monster();
        monster1.name = "두치";
        monster1.hp=200; //직접하면 값 그대로 부여되는 문제점 0아니고 음수찍힘

        System.out.println(monster1.name);
        System.out.println(monster1.hp);

        Monster monster2 = new Monster();
        monster2.name = "드라";
        monster2.hp = -200;

        System.out.println(monster2.name);
        System.out.println(monster2.hp);

        Monster monster3 = new Monster();
        monster3.name = "뿌꾸";
        monster3.setHp(-200); //이건 바로 값 부여한거?

        System.out.println(monster3.name);
        System.out.println(monster3.hp);
    }
}


package com.ohgiraffers.section02.encapsulation.problem2;

public class Application { //이거 이해가 잘 안됐습니데이..

    public static void main(String[] args) {
        /*comment. 필드에 직접 접근하는 경우 발생할 수 있는 문제점을 이해할 수 있다. */

        //name -> kinds로 변경했기 때문에 직접 name 필드에 접근하는 코드는 전부 컴파일에러를 발생시킨다.
        //즉, Monster 클래스의 일부를 수정한 것 뿐인데, 사용하는 고셍서는 전부 함께 수정을 해야 하는 부담이 생긴 것
        //이것은 유지보수에 악영향을 미친다.
        Monster monster1 = new Monster();
        monster1.name = "드라큘";
        monster1.hp=200;

        Monster monster2 = new Monster();
        monster2.name = "드라";
        monster2.hp=300;

        Monster monster3 = new Monster();
        monster3.name = "라큘";
        monster3.hp=400;

        System.out.println(monster1.name);
        System.out.println(monster1.hp);
        System.out.println(monster2.name);
        System.out.println(monster2.hp);
        System.out.println(monster3.name);
        System.out.println(monster3.hp);
    }

}


package com.ohgiraffers.section02.encapsulation.problem3;

public class Application {

    public static void main(String[] args) {

        /* comment. 필드에 직접 접근하는 경우 발생할 수 있는 문제점을 해결하는 방법을 이해하고 적용할 수 있다. */

        Monster monster1 = new Monster();
        monster1.setInfo("드라큘");
        monster1.setHp(100);

        Monster monster2 = new Monster();
        monster2.setInfo("프랑");
        monster2.setHp(200);

        Monster monster3 = new Monster();
        monster3.setInfo("늑대");
        monster3.setHp(-300);

        System.out.println(monster1.getInfo());
        System.out.println(monster2.getInfo());
        System.out.println(monster3.getInfo());
    }
}


package com.ohgiraffers.section02.encapsulation.problem4;


public class Application {

    public static void main(String[] args) {

        /* comment.접근제한자에 대해 이해하고 직접 필드에 접근하지 못하게 강제화할 수 있다. */

        /* 1. private필드에 직접 접근하여 compile error 발생 확인 '
        * 에러발생!!!!*/
        Monster monster1 = new Monster();
//        monster1.kinds = "프랑켄";
//        monster1.hp = 200; //직접적으로 접근 한다는 것

        /* 선언한 필드대로 공간은 생성되어 있지만 직접 접근하지 못하고
        * publiv으로 접근을 허용한 메소드만 이용할 수 있도록 해놓은 것이다.
        * 이것을 캡슐화라고 한다.*/

        /* 2. public 메소드를 이용하여 필드에 간접 접근*/
        monster1.setKinds("프랑");
        monster1.setHp(200);

        System.out.println(monster1.getInfo());
    }


}


package com.ohgiraffers.section03.abstraction;

import java.util.Scanner;

public class Application {

    public static void main(String[] args) {

        /* comment. 객체지향 프로그래밍에 대해 이해하고 객체와 클래스를 설계하여 프로그래밍 할 수 있다. */

        /* 객체를 설계하기 위해서는 복잡한 현실세계를 그대로 반영하기에는 너무 방대하고 복잡하기 때문에
        * 현실셰계를 프로그램의 목적에 맞게 단순화하는 추상화라는 기법을 적용하게 된다.*/

        /* 추상화란?
        * 공통된 부분을 추출하고, 공통되지 않은 부분은 제거한다는 의미를 가지며,
        * 추상화의 목적은 코드의 유연성을 확보하기 위함이다.
        * 유연성 확보는 여러 곳에 적용될 수 있는 유연한 객체를 의미하며, 즉 재사용성이 높아질 수 있게 한다는 의미이다.
        * 객체 재사용성이 증가하면 중복 작성되는 코드를 줄일 수 있으며, 오류발생 가능성을 감소시키고 유지보수성을 증가시킨다.
        * */

        /* 추상화 기법을 이용해서 객체를 설계하고 이를 바탕으로 클래스를 작성한 뒤 객체를 상호작용 시켜보자.*/

        /* 프로그램. 개요
        * 카레이서가 자동차를 운전하는 프로그램
        *
        * 시스템 요구사항
        * 1. 카레이서는 시동걸기, 엑셀레이터 밟기, 브레이크 밟기, 시동 끄기를 할 수 있다.
        * 2. 자동차는 시동걸기, 앞으로 가기, 멈추기, 시동 끄기를 할 수 있다.
        * 3. 자동차는 처음에 멈춘 상태로 대기하고 있는다.
        * 4. 카레이서는 먼저 자동차에 시동을 건다. 이미 걸려있는 경우 다시 시동을 걸 수 없다.
        * 5. 카레이서가 엑셀레이터를 밟으면 시동이 걸린 상태일 경우 자동차는 시속 10km/h 증가하며 앞으로 나간다.
        * 6. 자동차가 달리는 중인 경우 브레이크를 밟으면 자동차의 시속은 0으로 떨어지며 멈춘다.
        * 7. 브레이크를 밟을 때 자동차가 달리는 중이 아니라면 이미 멈춰있는 상태라고 안내한다.
        * 8. 카레이서가 시동을 끄면 더 이상 자동차는 움직이지 않는다.
        * 9. 자동차가 달리는 중이라면 시동을 끌 수 없다.
        * */

        /* 프로그램 설계하기
        * 1. 필요한 객체 도출
        * -플레이어(사용자), 카레이서, 자동차
        *
        * 2. 객체간 상호작용
        *  -카레이서가 수신할 수 있는 메시지 (카레이서가 해야하는 일)
        * 1)시동을 걸어라
        * 2)엑셀레이터를 밟아라
        * 3)브레이크를 밟아라
        * 4)시동을 꺼라
        *
        * -자동차가 수신할 수 있는 메시지 (자동차가 해야 하는 일)
        * 1)시동을 걸어라
        * 2)앞으로 가라
        * 3)멈춰라
        * 4)시동을 꺼라
        * 어떻게 상호작용할지 설계한 것
        * */

        CarRacer racer = new CarRacer();

        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("===카레이싱 프로그램===");
            System.out.println("1.시동걸기");
            System.out.println("2.전진");
            System.out.println("3.정지");
            System.out.println("4.시동끄기");
            System.out.println("9.프로그램종료");
            System.out.println("메뉴선택 :");
            int no = sc.nextInt();

            switch (no) {
                case 1 : racer.startUp(); break;
                case 2 : racer.stepAccelator();break;
                case 3 : racer.stepBreak();break;
                case 4 : racer.turnOff();break;
                case 9 :
                System.out.println("프로그램 종료"); break;
                default :
                    System.out.println("번호 잘못 선택 ");break;
            }
            if(no == 9){
                break;
            }
        }

    }
}


package com.ohgiraffers.section03.abstraction;

public class Car {

    private boolean isOn; //초기에는 시동이 꺼진 false상태
    private int speed;

    public void startUp() {
        if(isOn) {
            System.out.println("이미 시동이 걸려 있음");
        } else {
            this.isOn = true;
            System.out.println("시동을 걸었음 이제 출발 준비 완료");
        }
    }
    public void go() {
        if(isOn) {
            System.out.println("차가 앞으로 움직");
            this.speed += 10;
            System.out.println("현재 차의 시속" + this.speed);
        } else {
            System.out.println("차의 시동이 걸려있지 않음. 시동을 먼저 걸어라");
        }
    }
    public void stop() {
        if (isOn) {
            if (this.speed > 0)
            {
                System.out.println("브레이크 밟, 차 멈춰");
            } else{
                System.out.println("차 이미 멈춘 상태");
            }
        }

        else {
            System.out.println(" 차 시동 걸려있지 않 시동 걸어");
        }
    }

    public void turnOff() {
        if(isOn) {
            if(speed > 0) {
                System.out.println("달리는 상태에서 시동 끌 수 없 차 멈춰");
            } else {
                this.isOn = false;
                System.out.println("시동 끔, 다시 운행하려면 시동 켜");
            }
        } else {
            System.out.println("시동 이미 꺼진 상태 시동 상태 확인해");
        }
    }
}


package com.ohgiraffers.section03.abstraction;

public class CarRacer {

    private final Car car = new Car();

    public void startUp() {
        car.startUp();
    }

    public void stepAccelator() {
        car.go();
    }

    public void stepBreak() {
        car.stop();
    }

    public void turnOff() {
        car.turnOff();
    }
}


package com.ohgiraffers.section03.dto;

public class Application {

    public static void main(String[] args) {


    /* comment. 데이터를 추상화하는 기법을 이해하고 이를 사용하여 프로그래밍할 수 있다.
    * 앞서 추상화를 이용해 객체를 설계하고 클래스를 이용해 프로그래밍을 해보았다.
    * 하지만 추상화라는 것은 매우 어려운 작업이다.
    *
    * 캡슐화의 원칙에는 일부 어긋나긴 하지만 다른 목적을 가진 클래스와 객체를 추상화 하는 기법이 있다.
    * 행위 위주가 아닌 데이터를 하나로 뭉치기 위한 객체(Data Transfer Object)의 경우이다.
    * 이러한 객체를 설계할 때는 행위가 아닌 데이터가 위주이며, 캡슐화의 원칙을 준수하여
    * 모든 필드를 private로 직접 접근을 막고, 각 필드값을 변경하거나 반환하는 메소드를 세트로 미리 작성해둔다.
    * 어떤 것을 쓸 줄 모르니 미리 다 준비해두는 종합선물세트 같은 개념이다.
    * private 필드와 필드값을 수정하는 설정자(setter), 필드에 접근하는 접근자(getter)들로 구성된다.
    * 주로 계층간 데이터를 주고 받을 목적으로 사용한다.
    * */

        MemberDTO memberDTO = new MemberDTO();
        memberDTO.setNumber(1);
        memberDTO.setName("홍길동");
        memberDTO.setAge(20);
        memberDTO.setGender('남');
        memberDTO.setHeight(180.5);
        memberDTO.setWeight(80.6);
        memberDTO.setActivated(true);

//        System.out.println(memberDTO.setNumber);


}
}


package com.ohgiraffers.section03.dto;

public class MemberDTO {

    /* 취급하려고 하는 회원정보를 고려해서 필드를 우선 작성해본다.
    * 주로 화면(UI) 혹은 데이터베이스 테이블을 기준으로 한다.
    * 회원번호, 회원명, 나이, 성별, ... 을 관리할 것이다.
    * 객체가 가지는 속성(필드)을 추출하는 과정을 또한 추상화라고 볼 수 있다.
    * DTO클래스를 만들기 위해서는 모든 필드를 private로 만든다.
    * */

    private int number;
    private String name;
    private int age;
    private char gender;
    private double height;
    private double weight;
    private boolean isActivated;
     //회원탈퇴여부(활성화여부)

    /* 이렇게 필드만 만들고 나면 private로 접근이 제한되었기 때문에 각 영역에 접근을 할 수 없다.
    * public으로 접근을 허용하는 설정자/접근자를 이용해 필드에 간접적으로 접근할 수 있도록 할 것*/

    /* 설정자(setter) 접근자(getter)의 경우 실무에서 암묵적으로 통용되는 작성 규칙이 존재한다
    * 설정자 작성 규칙
    * 필드값을 변경할 목적의 매개변수를 변경하려는 필드와 같은 자료형으로 선언하고
    * 호출 당시 전달되는 매개변수의 값을 이용하여 필드의 값을 변경한다.
    * [표현식]
    * public void set필드명(매개변수) {
    *      필드 = 매개변수;
    * }
    * [작성예시]
    * public void setName(String name) {
    *   this.name = name;
    * }
    *
    * 접근자 작성규칙
    * 필드의 값을 반환받을 목적의 메소드 집합을 의미한다.
    * 각 접근자는 하나의 필드에만 접근하도록 한다.
    * 필드에 접근해서 기록된 값을 return을 이용하여 반환하며, 이 때 반환타입은 반환하려는 값의 자료형과 일치시킨다.
    * [표현식]
    * public 반환형 get필드명() {
    *   return 반환값;
    * }
    * [작성예시]
    * public void getName() {
    *       return this.name;
    *
    * */

    public void setNumber(int number){
        this.number = number;
    }
    public void setName(String name){
        this.name = name;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public void setGender(char gender){
        this.gender = gender;
    }
    public void setHeight(double height){
        this.height = height;
    }
    public void setWeight(double weight){
        this.weight = weight;
    }
    public void setActivated(boolean isActivated){
        this.isActivated = isActivated;
    }
    public int setNumber(){
        return number;
    }
    public String setName() {
        return name;
    }
    public int setAge() {
        return age;
    }
    public char setGender() {
        return gender;
    }
    public double setHeight() {
        return height;
    }
    public double setWeight() {
        return weight;
    }
    //boolean 접근자는 get으로 시작하지 않고 is로 시작하는 것이 일반적인 관례
    public boolean isActivated() {
        return isActivated;
    }
}


package com.ohgiraffers.section04.constructor;

public class Application {

    public static void main(String[] args) {

        /*comment. 생성자 함수가 무엇인지 이해하고 선언 및 호출할 수 있다. */
        /*지금까지 우리가 객체를 생성했던 코드 다시 한 번 살펴보기
        * 클래스명 레퍼런스 변수명 = new 클래스명(); 이렇게 객체 생성
        * 하지만 new 뒤에 클래스명은 사실 (생성자를 부르고 있었던 것)생성자라 불리는 메소드를 호출하는 구문이다.
        * 정확히 말하자면 클래스명 레퍼런스 변수명 = new 생성자(); 라고 표현한다.
        * */

        /* 생성자란?
        * 인스턴스(객체)를 생성할 때 초기 수행할 명령이 있는 경우 미리 작성해두고, 인스턴스를 생성할 때 호출된다.
        * 생성자 함수에 매개변수가 없는 생성자를 기본생성자(default constructor)라고 하며,
        * 기본생성자는 compiler에 의해 자동으로 추가되기 때문에 지금까지 명시적으로 작성하지 않고 사용할 수 있었다.
        *
        * 기본생성자를 이용해 인스턴스를 생성하게 되면 자바에서는 자료형별 초기값을 이용해 필드를 초기화한다.
        * 필드의 초기값을 사용자가 원하는대로 설정하고 싶을 경우 생성자의 호출 시 인자로 값을 전달하여 호출할 수 있다.
        * 이러한 인자를 받아 필드를 초기화 할 목적의 생성자를 매개변수 있는 생성자라고 한다.
        * 하지만 매개변수 있는 생성자가 한 개라도 존재하는 경우 compiler는 기본 생성자를 자동으로 추가해주지 않는다.
        * 매개변수 있는 생성자는 주로 인스턴스 생성 시점에 필드의 값을 사용자가 원하는대로 초기화 할 목적으로 사용한다.
        * */

        /* 1.기본생성자 호출하여 인스턴스 생성 후 필드값 출력*/
//        User user1 = new User();
//        System.out.println(user1.getInformation());

        /* 2. id, pwd, name을 매개변수로 전달 받을 생성자를 호출하여 인스턴스 생성 후 필드 값 출력 */
//        User user2 = new User("user01", )//오류떠서 ...~

        /* 3. 모든 필드를 초기화하는 생성자를 호출하여 인스턴스 생성 후 필드 값 출력 */
//        User user3 = new User("user02)
    }
}


//package com.ohgiraffers.section04.constructor;
//무슨 말인지 하 나 도 . . . ~
//import java.util.Date;
//
//public class User {
//
//    private String id;
//    private String pwd;
//    private String name;
//    private java.util.Date enrollDate; //필드로 다른 클래스 자료형도 사용할 수 있다.
//
//    /* 생성자의 작성 위치
//    *   작성 위치는 문법상으로는 클래스 내부에 작성하면 되지만,
//    * 통상적으로 필드 선언부와 메소드 선언부 사이에 작성한는 것이 관례이다.
//    *  */
//
//    /* 생성자의 사용 목적
//    * 1. 인스턴스 생성 시점에 수행할 명령이 있는 경우 사용한다.
//    * 2. 매개변수 있는 생성자의 경우 매개변수로 전달받은 값으로 필드를 초기화하며 인스턴스를 생성할 목적으로 주로 사용된다.
//    * 3. 작성한 생성자 외에는 인스턴스를 생성하는 방법을 제공하지 않는다는 의미를 가진다.
//    *   따라서, 인스턴스를 생성하는 방법을 제한하기 위한 용도로 사용할 수도 있다.(초기값 전달 강제화)
//    * */
//
//    /* 생성자 작성 방법
//    * [표현식]
//    * 접근제한자 클래스명(매개변수) {
//    *       인스턴스 생성 시점에 수행할 명령 기술(주로 필드를 초기화)
//    *       this.필드명 = 매개변수; //설정자 여러개의 기능을 한번의 호출로 수행할 수 있다.
//    * }
//    * */
//
//    /* 생성자 작성 시 주의할 점
//    * 1. 생성자 메소드는 반드시 클래스명의 이름과 동일해야 한다.(대/소문자까지 같아야함)
//    * 2. 생성자 메소드는 반환형을 작성하지 않는다.(작성하는 경우 생성자가 아닌 메소드로 인식한다.)
//    * */
//
//    /* 1. 기본 생성자 있는지 없는지 꼭 확인 */
//    public User() {
//
//        /* 수행할 내용이 아무것도 존재하지 않는다.
//        * */
//        System.out.println("User 클래스의 기본 생성자 호출함..."); //항상 이렇게 아련한게 포인트인지.. 궁금했습니다
//    } //접근자, 클래스명과 동일하게
//
//    //동일한 이름의 생성자 혹은 메소드를 한 클래스 안에서 작성하는 것은 불가능하다.
////    public User(){}
//
//    /* 2. 매개변수 있는 생성자 */
//    /* 초기화 할 필드가 여러개 인 경우, 초기화 하고 싶은 필드의 갯수별로 생성자를 여러 개 준비해둘 수 있다. */
//
//    /* id, pwd, name의 초기화를 담당할 생성자*/
//    public User(String id, String pwd, String name){
//        //매개변수 있는 생성자의 주 목적은 인스턴스 생성 시점에 매개변수로 전달 받은 값을 이용해서 필드를 초기화한다.
//        this.id = id; //id 초기화 this도 인스턴스 초기화되면 그 시점에 발생한 주소가 this에 저장되는 것
//        this.pwd = pwd;
//        this.name = name;
//
//        System.out.println("User 클래스의 id, pwd, name을 초기화하는 생성자 호출함...");
//
//    }
//
//    /*3. id, name, enrollDate의 초기화를 담당할 생성자(모든 필드르 초기화하는 생성자) */
//    public User(String id, String pwd, String name, java.util.Date enrollDate){
//        /* 매개변수로 전달 받은 값을 이용해 모든 필드를 초기화한다.*/
//        /* 3-1. 각 필드에 접근하여 초기화 */
////        this.id = id;
////        this.pwd = pwd;
////        this.name = name;
////        this.enrollDate = enrollDate;
//
//        /* 3-2. 사전에 작성되어 있는 다른 생성자 함수를 이용하여 초기화*/
//
//        //this() : 동일한 클래스 내에 작성한 다른 생성자 메소드를 호출하는 구문
//        //         가장 첫 줄에 선언해야 한다.
//        this(id, pwd, name); //미리 작성한 세 개의 필드를 초기화 하는 생성자로 매개변수로 받은 값을 전달
//
//        this.enrollDate = enrollDate; // 왜 얘만 이렇게..?
//
//        System.out.println("User 클래스의 모든 필드를 초기화하는 생성자 호출함...");
//    }
//
//    public String getInformation() {
//
////        return this.id this.pwd  this.name  this.enrollDate;
//따라가기 힘들어요 ^^..
//
//    }
//}


package com.ohgiraffers.section04.DTO;

public class Application {

    public static void main(String[] args) {

        /*comment. 생성자를 이용한 초기화와 설정자를 이용한 초기화의 장단점 이해*/
        /*1. 생성자를 이용한 초기화
        *  장점 : setter 메소드를 여러 번 호출해서 사용하지 않고 단 한 번의 호출로 인스턴스를 생성 및 초기화 할 수 있다.
        *  단점 : 필드를 초기화 할 매개변수의 갯수를 경우의 수 별로 모두 만들어둬야 한다.
        *        호출 시 인자가 많아지는 경우 어떠한 값이 어떤 필드를 의미하는지 한 눈으로 보기 힘들다.
        *
        * 2. 설정자를 이용한 초기화
        *   장점 : 필드를 초기화하는 각각의 값들이 어떤 필드를 초기화하는지 명확하게 볼 수 있다.
        *   단점 : 하나의 인스턴스를 생성할 때 한 번의 호출로 끝나지 않는다.
        * */

        /*1. 생성자를 이용한 초기화 */
        UserDTO user1 = new UserDTO("ohgiraffers","ohgiraffers","ohgiraffers",new java.util.Date());
//        System.out.println(user1.getInformation());
        /*2. 기본생성자와 설정자를 이용한 초기화 */
        UserDTO user2 = new UserDTO();
        user2.setId("oh");
        user2.setPwd("oh");
        user2.setName("oh"); //명확하게 볼 수 있는 장점
        user2.setEnrollDate(new java.util.Date());

//        System.out.println(user2.getInformation());
    }
}


package com.ohgiraffers.section04.DTO;

public class UserDTO {

    private String id; //'필드는 이런식' 이 몬말..
    private String pwd;
    private String name;
    private java.util.Date enrollDate;

    public UserDTO() {}

    public UserDTO(String id, String pwd, String name, java.util.Date enrollDate) {
        this.id = id;
        this.pwd = pwd;
        this.name = name;
        this.enrollDate = enrollDate;


    }
    public void setId(String id) {
        this.id = id;
    }
    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    public void setName(String name) {
        this.name = name;
    }
    public void setEnrollDate(java.util.Date enrollDate){
        this.enrollDate = enrollDate;
    }
    public String getId() {
        return id;
    }
    public String getPwd() {
        return pwd;
    }
    public String getName() {
        return name;
    }
    public java.util.Date getEnrollDate() {
        return enrollDate;
    }
    //모든 필드의 값을 하나의 문자열로 반환하는 메소드로 필드값 확인용으로 많이 사용한다.
//    public String getInformation() {
//        return this.id + this.pwd + this.name + this.enrollDate;
//    }
}
