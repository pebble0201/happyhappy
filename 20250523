250523 교육일지

xml방식, java방식으로 crud 하기

스스로 해본 delete

package com.ohgiraffers.section01.xmlconfig;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Application {

    public static void main(String[] args) {

        Scanner sc =  new Scanner(System.in);

        MenuController menuController = new MenuController();
        do {
            System.out.println("====메뉴관리====");
            System.out.println("1. 메뉴 전체 조회");
            System.out.println("2. 메뉴 코드로 메뉴 조회");
            System.out.println("3. 신규 메뉴 추가");
            System.out.println("4. 메뉴 수정");
            System.out.println("5. 메뉴 삭제");
            System.out.println("메뉴 관리 번호 입력 : ");
            int no = sc.nextInt();

            switch (no) {
                case 1 : menuController.selectAllMenu(); break;
                case 2 : menuController.selectMenuByCode(inputMenuCode()); break;
                case 3 : menuController.registMenu(inputMenu()); break;
                case 4 : menuController.modifyMenu(inputModifyMenu()); break;
                case 5 : menuController.deleteMenu(inputDelete()); break;
                default:
                    System.out.println("잘못된 메뉴를 선택함"); break;
            }
        } while (true);
    }

    private static Map<String, String> inputMenuCode() {

        Scanner sc = new Scanner(System.in);
        System.out.println("메뉴 코드 입력 : ");
        String code = sc.nextLine();

        Map<String,String> parameter = new HashMap<>();
        parameter.put("code", code);

        return parameter;
    }

    private static Map<String, String> inputMenu() {

        Scanner sc = new Scanner(System.in);
        System.out.println("메뉴 이름 입력 : ");
        String name = sc.nextLine();
        System.out.println("메뉴 가격 입력 : ");
        String price = sc.nextLine();
        System.out.println("카테고리 코드 입력 : ");
        String categoryCode = sc.nextLine();

        Map<String, String> parameter = new HashMap<>();
        parameter.put("name", name);
        parameter.put("price", price);
        parameter.put("categoryCode", categoryCode);

        return parameter;
    }

    private static Map<String,String> inputModifyMenu() {

        Scanner sc = new Scanner(System.in);
        System.out.println("수정할 메뉴 코드 입력 : ");
        String code = sc.nextLine();
        System.out.println("수정할 메뉴 이름 입력 : ");
        String name = sc.nextLine();
        System.out.println("수정 할 메뉴 가격 입력 : ");
        String price = sc.nextLine();
        System.out.println("수정할 카테고리 코드 입력 : ");
        String categoryCode = sc.nextLine();

        Map<String, String > parameter = new HashMap<>();
        parameter.put("code", code);
        parameter.put("name", name);
        parameter.put("price", price);
        parameter.put("categoryCode", categoryCode);

        return parameter;
    }

    private static Map<String, String> inputDelete() {
        Scanner sc = new Scanner(System.in);
        System.out.println("삭제할 메뉴 코드 입력 : ");
        String code = sc.nextLine();

        Map<String, String> parameter = new HashMap<>();
        parameter.put("code", code);

        return parameter;
    }
}


package com.ohgiraffers.section01.xmlconfig;

import java.util.List;
import java.util.Map;

public class MenuController {

    //불변보장
    private final PrintResult printResult;

    private final MenuService menuService;

    public MenuController() {
        printResult = new PrintResult();
        menuService = new MenuService();
    }

    public void selectAllMenu() { //controller dao db 요청,, 계층 분리..?

        List<MenuDTO> menuList = menuService.selectAllMenu();

        if(menuList != null) {
            printResult.printMenuList(menuList);
        } else {
            printResult.printErrorMessage("selectList");
        }
    }

    public void selectMenuByCode(Map<String, String> parameter) {

        int code = Integer.parseInt(parameter.get("code"));
        MenuDTO menu = menuService.selectMenuByCode(code);

        if(menu != null) {
            printResult.printMenu(menu);
        } else {
            printResult.printErrorMessage("selectOne");
        }
    }
    public void registMenu(Map<String, String >parameter) {
        String name = parameter.get("name");
        int price = Integer.parseInt(parameter.get("price"));
        int categoryCode = Integer.parseInt(parameter.get("categoryCode"));

        MenuDTO menu = new MenuDTO();
        menu.setName(name);
        menu.setPrice(price);
        menu.setCategoryCode(categoryCode);

        if(menuService.registMenu(menu)) {
            printResult.printSuccessMessage("insert");
        } else {
            printResult.printErrorMessage("insert");
        }
    }

    public void modifyMenu(Map<String, String> parameter) {

        int code = Integer.parseInt(parameter.get("code"));
        String name = parameter.get("name");
        int price = Integer.parseInt(parameter.get("price"));
        int categoryCode = Integer.parseInt(parameter.get("categoryCode"));

        MenuDTO menu = new MenuDTO();
        menu.setCode(code);
        menu.setName(name);
        menu.setPrice(price);
        menu.setCategoryCode(categoryCode);

        if(menuService.modifyMenu(menu)) {
            printResult.printSuccessMessage("update");
        } else {
            printResult.printErrorMessage("update");
        }

    }

    public void deleteMenu(Map<String, String> parameter) {

        int code = Integer.parseInt(parameter.get("code"));

        MenuDTO menu = new MenuDTO();
        menu.setCode(code);

        if(menuService.deleteMenu(menu)) {
            printResult.printSuccessMessage("delete");
        } else {
            printResult.printErrorMessage("delete");
        }
    }
}



package com.ohgiraffers.section01.xmlconfig;

import org.apache.ibatis.session.SqlSession;

import java.util.List;

public class MenuDAO {
    public List<MenuDTO> selectAllMenu(SqlSession sqlSession) {

        return sqlSession.selectList("MenuMapper.selectAllMenu"); //namespace menumapper crud할 수 있는 메소드 제공 그 때 ms랑 id작성해야함

    }

    public MenuDTO selectMenuByCode(SqlSession sqlSession, int code) {
        return sqlSession.selectOne("MenuMapper.selectMenuByCode", code);
    }

    public int insertMenu(SqlSession sqlSession, MenuDTO menu) {

        return sqlSession.insert("MenuMapper.insertMenu", menu);
    }

    public int updateMenu(SqlSession sqlSession, MenuDTO menu) {

        return sqlSession.update("MenuMapper.updateMenu",menu);//메뉴와 함께 저 아이디 가진애 넘겨..?
    }

    public int deleteMenu(SqlSession sqlSession, MenuDTO menu) {

        return sqlSession.delete("MenuMapper.deleteMenu", menu);
        }
    }


package com.ohgiraffers.section01.xmlconfig;

public class MenuDTO {

    private int code;
    private String name;
    private int price;
    private int categoryCode;
    private String orderableStatus;

    public MenuDTO() {}

    public MenuDTO(int code, String name, int price, int categoryCode, String orderableStatus) {
        this.code = code;
        this.name = name;
        this.price = price;
        this.categoryCode = categoryCode;
        this.orderableStatus = orderableStatus;
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public int getCategoryCode() {
        return categoryCode;
    }

    public void setCategoryCode(int categoryCode) {
        this.categoryCode = categoryCode;
    }

    public String getOrderableStatus() {
        return orderableStatus;
    }

    public void setOrderableStatus(String orderableStatus) {
        this.orderableStatus = orderableStatus;
    }

    @Override
    public String toString() {
        return "MenuDTO{" +
                "code=" + code +
                ", name='" + name + '\'' +
                ", price=" + price +
                ", categoryCode=" + categoryCode +
                ", orderableStatus='" + orderableStatus + '\'' +
                '}';
    }
}


package com.ohgiraffers.section01.xmlconfig;

import org.apache.ibatis.session.SqlSession;

import java.util.List;

import static com.ohgiraffers.section01.xmlconfig.Template.getSqlSession;

public class MenuService {

    private final MenuDAO menuDAO;

    public MenuService() {
        menuDAO = new MenuDAO();
    }

    public List<MenuDTO> selectAllMenu() {
        //connection삭제 ,, 로직 작성

        SqlSession sqlSession = getSqlSession(); //connection과 동일하게

        List<MenuDTO> menuList = menuDAO.selectAllMenu(sqlSession);

        sqlSession.close();

        return menuList;
    }

    public MenuDTO selectMenuByCode(int code) {

       SqlSession sqlSession = getSqlSession();

       MenuDTO menu = menuDAO.selectMenuByCode(sqlSession, code);

       sqlSession.close();

       return menu;
    }

    public boolean registMenu(MenuDTO menu) {

        SqlSession sqlSession = getSqlSession();

        int result = menuDAO.insertMenu(sqlSession, menu);

        if(result > 0) {
            sqlSession.commit();
        } else {
            sqlSession.rollback();
        }
        sqlSession.close();

        return result > 0? true : false;
    }

    public boolean modifyMenu(MenuDTO menu) {

        SqlSession sqlSession = getSqlSession();

        int result = menuDAO.updateMenu(sqlSession, menu);

        if(result > 0) {
            sqlSession.commit();
        } else {
            sqlSession.rollback();
        }
        sqlSession.close();

        return result > 0? true: false;
    }

    public boolean deleteMenu(MenuDTO menu) {

        SqlSession sqlSession = getSqlSession();

        int result = menuDAO.deleteMenu(sqlSession, menu);

        if(result > 0) {
            sqlSession.commit();
        } else {
            sqlSession.rollback();
        }
        sqlSession.close();
        return  result > 0? true: false;
    }
}


package com.ohgiraffers.section01.xmlconfig;

import java.util.List;

public class PrintResult {

    public void printMenuList(List<MenuDTO> menuList) {

        for(MenuDTO menu : menuList) {
            System.out.println(menu);
        }
    }
    public void printMenu(MenuDTO menu) {
        System.out.println(menu);
    }
    public void printSuccessMessage(String successCode) {
        String succeessMessage = "";
        switch (successCode) {
            case "insert" : succeessMessage = "신규 메뉴 등록 성공"; break;
            case "update" : succeessMessage = "메뉴 수정 성공"; break;
            case "delete" :succeessMessage = "메뉴 삭제 성공"; break;
        }
        System.out.println(succeessMessage);
    }

    public void printErrorMessage(String errorCode) {

        String errorMessage = "";
        switch (errorCode) {
            case "selectList" : errorMessage = "메뉴목록조회 실패"; break;
            case "selectOne" : errorMessage = "메뉴 상세 조회 실패"; break;
            case "insert" : errorMessage = "신규 메뉴 등록 실패"; break;
            case "update" : errorMessage = "메뉴 수정 실패"; break;
            case "delete" : errorMessage = "메뉴 삭제 실패"; break;
        }

        System.out.println(errorMessage);
    }


}


package com.ohgiraffers.section01.xmlconfig;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class Template {
    //sqlsession반환받는 로직작성

    private static SqlSessionFactory sqlSessionFactory;

    public static SqlSession getSqlSession() {

        if (sqlSessionFactory == null) {
            String resource = "com/ohgiraffers/section01/xmlconfig/mybatis-config.xml";
            try {
                InputStream inputStream = Resources.getResourceAsStream(resource);
                sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return sqlSessionFactory.openSession(false);
    }
}


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "MenuMapper">
    <!-- 조회한 컬럼과 DTO 매핑시키기 위한 설정 -->
    <resultMap id ="menuResultMap" type="com.ohgiraffers.section01.xmlconfig.MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectAllMenu" resultMap="menuResultMap">
        SELECT
            MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        ORDER BY MENU_CODE
    </select>

    <select id="selectMenuByCode" parameterType="_int" resultMap="menuResultMap">
        <!--
        파라미터가 한 개인 경우 바인딩 되는 이름은 상관 없으며, 파라미터 타입을 지정하지 않아도 된다.
        - resultMap : 위에서 생성한 resultMap을 리턴타입으로 이용하는 경우
        - resultType : 이미 정의되어 있는 타입을 이용하여 리턴 타입으로 이용하는 경우
        - parameterType : 파라미터로 전달되는 값의 타입을 작성(생략해도 상관 없)
        -->
        SELECT
        MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        AND MENU_CODE = #{ code }
    </select>

    <!--
    insert, update, delete의 경우 resultType은 작성하지 않고, 기본 _int로 수행결과를 반환한다.
    파라미터로 전달된 DTO의 필드명으로 값을 바인딩 해야하며, getter을 이용하므로 getter가 없으면 에러가 발생한다.
    파라미터 타입도 생략이 가능하다.
    -->
    <insert id ="insertMenu" parameterType="com.ohgiraffers.section01.xmlconfig.MenuDTO">
        INSERT INTO TBL_MENU
        (MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS)
        VALUES
        (#{ name }, #{ price }, #{ categoryCode }, 'Y')
    </insert>

    <update id="updateMenu" parameterType="com.ohgiraffers.section01.xmlconfig.MenuDTO">
        UPDATE TBL_MENU
        SET MENU_NAME = #{ name },
            MENU_PRICE = #{ price },
            CATEGORY_CODE = #{ categoryCode }
        WHERE MENU_CODE = #{ code }

    </update>

    <delete id="deleteMenu" parameterType="com.ohgiraffers.section01.xmlconfig.MenuDTO">
        DELETE
        FROM TBL_MENU
        WHERE MENU_CODE = #{ code }
    </delete>
</mapper>


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="dev">
        <environment id="dev">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost/menudb"/>
                <property name="username" value="ohgiraffers"/>
                <property name="password" value="ohgiraffers"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
    <mapper resource = "com/ohgiraffers/section01/xmlconfig/menu-mapper.xml"/>
    </mappers>
</configuration>
