250416 교육일지
/* 03_암묵적 타입 변환
개발자가 의도적으로 값의 타입을 변환하는 것을 명시적 타입 변환이라고 하마ㅕ
자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것을 암묵적 타입 변환이라고 한다.
*/

/* 01_문자열 타입으로 변환 */
console.log(10 + '20');

// 표현식의 결과를 문자열 타입으로 암묵적으로 변환
console.log(`10 + 20 : ${20 = 20}`);

console.log(1 + "");
console.log(NaN + ""); //
console.log(Infinity + ""); //빈 ""붙이면 문자열로 바뀜
console.log(null + "");
console.log(undefined + "");
// console.log(Symbol() + "");
console.log({} + "");
console.log([] + "");
console.log(function(){} + "");

/* 02_숫자타입으로 변환 */
console.log(10 - '5'); //+이외 연산자 쓰면 숫자 타입 나옴
console.log(10 * 5); //숫자타입으로 암묵적으로 변환된 것
console.log(10% 'javascript');//숫자가 아니어서 연산이 불가능하다 %는 나누기

//비교 연산자로 크기 비교하기 위해 모두 숫자타입이어야 하므로 숫자가 아 닌 피연산자를 숫자타입으로 암묵적 타입 변환한다.
console.log(10>'5'); //숫자타입으로 변환되어 대소 비교가 가능해서 true

console.log(+''); //단항연산자 항이 하나 아무것도 없는 값으로 0이 나옴 숫자 0
console.log(+'1'); //숫자 1
console.log(+'javascript'); //숫자가 아니어서 NaN 나오는 것
console.log(+true); //1
console.log(+false); //0
console.log(+null); //아무것도 없으니까 0이 나옴
console.log(+undefined) //undefined숫자 아니니까 NaN
//console.log(+Symbol()); //symbol은 숫자가 아니어서 에러
console.log(+{}); //객체 리터럴 같은 경우는 NaN 숫자로 암묵적으로 변환시킬 수 없다고 알려주는 것
console.log(+[]); //배열 안에 아무것도 없으므로 0이라고 나오는 것, 빈 배열만 숫자로 바꿀 수 있고
console.log(+[1,2,3]); //빈 배열이기 때문에 0이라고 나오는 것, 배열에 무언가 있으면 숫자로 바꿀 수 없다
console.log(+function(){}); //not a number

//빈 문자열, false, null, 빈 배열[] = 0
//true만 = 1
//나머지는 NaN

/* 03_불리언 타입으로 변환 */

//자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 평가되는 값) 또는 Falsy값(거짓으로 평가되는 값)으로 구분한다.
if(true) console.log("if(true)");       
if(false) console.log("if(false)");    
if(undefined) console.log("if(undefined)");
if(null) console.log("if(null)");
if(0) console.log("if(0)");
if(NaN) console.log("if(NaN)");
if('') console.log("if('')");          
if('JavaScript') console.log("if('JavaScript')");

//false, undefined, null, 0, NaN "(빈문자열)"은 Falsy값 그 외는 Truthy값

/* 04_명시적 타입 변환 */
/* 01_문자열 타입으로 변환 */

//1.string 생성자 함수를 new 연산자 없이 호출
console.log(String(10)); //string은 문자열 10 string으로 문자열로 바꿀 수 있음
console.log(String(NaN)); //NaN
console.log(String(Infinity));
console.log(String(true));
console.log(String(false));

//2. Object.prototype.toSring 메소드 사용
console.log((10). toSring); //소괄호로 감싸줘야함 숫자 10이 아닌 문자열 10이 나오는 것
console.log((NaN).toString);
console.log((Infinity).toString);
console.log((true).toSring);
console.log((false).toSring);

//3.문자열 연결 연산자 이용

/* 02_숫자 타입으로 변환 */

//1.Number 생성자 함수를 new 연산자 없이 호출
console.log(Number('10')); // 숫자로 나옴 숫자로 바꾸고 싶으면면
console.log(Number('10.01')); // 숫자로 나옴
console.log(Number(true)); // 1 false는 0

//2.parseIint, parseFloat 함수 이용
console.log(parseInt('10')); //10을 정수형으로 바꾸겠다는 의미 숫자 10
console.log(parseFloat('10')); //10
console.log(parseInt('10.01')) //정수로 바꿀 수 있는 곳까지만 반영해줌
console.log(parseFloat('10.01')); //10.01
console.log(parseFloat('10.01.01')); // 실수로 바꿔줄 수 있는 곳까지만 나타내는 것

//3. '+' 단항 산술 연산자 이용 숫자로도 명시적으로 변환할 수 있음

//4. '*' 산술 연산자 이용 곱셈으로 산술 연산자 이용해서 숫자로 변환시킬 수 있음
console.log('10'*1);
console.log(typeof('10'*1)); //타입이 뭔지 알아보기 위해 typeof  number라고 뜸
console.log(true*1); //1 false = 0 나옴

/* 03_불리언 타입으로 변환 */

//1.Boolean 생성자 함수를 new 연산자 없이 호출하는 방법
console.log(Boolean('JavaScript'));         // true 
console.log(Boolean(''));                   // false 
console.log(Boolean(1));                    // true 
console.log(Boolean(0));                    // false 
console.log(Boolean(NaN));                  // false 
console.log(Boolean(Infinity));             // true 
console.log(Boolean(null));                 // false 
console.log(Boolean(undefined));            // false 
console.log(Boolean({}));                   // true 
console.log(Boolean([]));                   // true

// 2. ! 느낌표 하나 있으면 부정이라는 뜻, 부정 논리 연산자
// 부정 논리 연산자를 두번 사용하는 방법
console.log(!!'JavaScript');                   // true
console.log(!!'');                          // false
console.log(!!1);                              // true
console.log(!!0);                           // false
console.log(!!NaN);                         // false
console.log(!!Infinity);                    // true
console.log(!!null);                        // false
console.log(!!undefined);                   // false
console.log(!!{});                          // true
console.log(!![]);                          // true

/*01_비교 연산자*/

/*동등 / 일치 비교 연산자 */

// 숫자1, 문자'1', true 비교
console.log(`1 == '1' : ${1=='1'}`); //==값이 같은지 확인하는 것 암묵적으로 타입이 변환되어 값을 일치시킨
console.log(`1==true : ${1==true}`); //true가 1이니까 같다고 나오는 것

console.log(`1 === '1' : ${1==='1'}`); //값은 같지만 타입이 다르기 때문에 false
console.log(`1=== true : ${1===true}`);

//숫자 0, 문자'0', 빈 문자열 '', false비교
console.log(`0 == '0' : ${0=='0'}`); //값은 같으니 true
console.log(`0 == '' : ${0==''}`); //값은 같으니 true
console.log(`0 == false : ${0==false}`); //값은 같으니 true

console.log(`0 === '0' : ${0==='0'}`); //타입이 다르니 false
console.log(`0 === '' : ${0===''}`); //타입이 다르니 false
console.log(`0 === false : ${0===false}`); //타입이 다르니 false

//null, undefined 비교
console.log(`null == undefined : ${null == undefined}`); //둘다 falsy값이라 true
console.log(`null === undefined : ${null === undefined}`); //타입이 달라 false 값과 타입 비교

// NaN은 자신과 일치하지 않은 유일한 값
console.log(`NaN == NaN : ${NaN==NaN}`); 
console.log(`NaN === NaN : ${NaN===NaN}`); //값이 애초에 달라 false

//일치 비교 연산자
console.log(`'hello==='hello' : ${'hello'==='hello'}`);
console.log(`'hello!=='hello' : ${'hello'!=='hello'}`); //다른지 물어본거니까 같으므로 false가 나오는 것

//대소 비교 연산자
console.log(`'apple' < 'banana' : ${'apple' < 'banana'}`); //사전 순으로
console.log(`'cat' >= 'Zoo' : ${'cat' >= 'Zoo'}`); // 대문자가 소문자보다 작다

/*01_논리연산자-단축 평가 */

console.log('apple' || 'banana'); //둘다 true 첫번째 true 값을 반환시키는 것 oror연산자
console.log(false || 'banana'); //앞이 false 뒤 true 뒤의 true값에 해당하는 banana나오는 것것

console.log('apple' && 'banana'); //마지막 true값을 반환하는 &&
console.log(false && 'banana'); //둘다 true여야하는데 false값이 있어서
console.log('banana' && false); //둘다 true여야하는데 false값이 있어서

var num = 1;
if (num % 2 == 0) //2로 나눴을때 나머지가 0이면(짝수)
    console.log('짝수입니다');
else
    console.log('홀수입니다');

// 위를 단축평가를 활용하여 바꿔보기
num % 2 == 0 && console.log('짝수입니다'); //num이 짝수 일때만 '짝수입니다' 출력하겠다는 것
num % 2 == 0 || console.log('홀수입니다'); //num이 홀수 일때만 '홀수입니다' 출력하겠다는 것

/* 01_옵셔널 체이닝 연산자 */
var obj = null;
//var val = obj.value; //값이 null(없어서) 출력이 안됨 이때 optional chaining써서 에러 안나게
var val = obj?.value;
console.log(val); //에러 안나게 하려고 ?.

var str=''; //빈 문자열 falsy 값
var len = str && str.length; //길이가 얼마나 있는지 확인하는 메소드
console.log(len);

var len = str?.length; // 명시적으로 하기 위해
console.log(len); //길이가 0 이라고 나옴

/* 02_null 병합 연산자 */
var test = null //test라는 값에 null 주고 싶은 것
var test = null ?? '기본값'; //null 이거나 undefined 값일때만 반환시킴
console.log(test);

//null 병합 연산자는 null, undefined가 아닐 경우 그대로 반환환
var value = '' ?? '기본값'; //'' 빈문자열이기 때문에 
console.log(value);

/* 01_객체*/

var student = {

 // 키 - 값 쌍으로 구성 된 프로퍼티
 //프로퍼티 : 객체의 상태를 나타내는 값(data)
 name : '유관순',
 age : 16,
 //메소드 : 상태데이터 자체가 프로퍼티 를 참조하고 조작할 수 있는 동작을 메소드라 함
 getInfo : function() {
 return `${this.name}(은)는 ${this.age}세입니다.` //this는 내가 가지고 있는 주소
 }
};

console.log(typeof student);
console.log(student);
console.log(student.getInfo()); //return으로 되돌아오고 있음.

//프로퍼티를 정의하지 않을 시 빈 객체가 생성된다.
var student2 = {}; //프로퍼티를 안넣으면 됨
console.log(typeof student2);
console.log(student2); //프로퍼티 안에 없다면 빈 객체인것

/*01_프로퍼티 : 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성 된다.*/

var student = {
    name: '유관순',
    age: 16
}; //키는 name 과 age 각각 값은 유관순, 16 

/*
프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열이므로 따옴표를 사용하지만
식별자 네이밍 규칙을 따르는 경우 사용하지 않아도 된다.
프로퍼티 값은 자바스크립트에서 사용할 수 있는 모든 값
 키는 값에 접근하기 위한 식별자
*/
var obj = {
normal : 'normal value',
'@ s p a c e @' : "", //문자와 공백은 따옴표를 주면 값을 줄 수 있음
'' : '',  //오류 발생하지 않지만 논리적으로 문제가 생길 수 있어 권장하지 않음
0:1, //숫자 키는 내부적으로 문자열로 변환됨
var : 'var', //예약어 키는 오류 발생하지 않지만 권장하지 않음
normal : 'new value' //이미 존재하는 키를 중복 선언하면 나중에 선언한 프로퍼티로 덮어씀
};

console.log(obj.normal);
console.log(obj['normal']);

var key = 'test';
obj[key] = 'test value';

/* 02_메소드 : 자바스크립트의 함수는 객체이다. 함수는 값으로 취급할 수 있고 프로퍼티 값으로 사용할 수 있다.*/

var dog = {
name : '뽀삐', //뽀삐가 뭘 먹을 때 어떤 음식을 먹을지 선언
eat : function(food){
console.log(`${this.name}은 ${food}를 맛있게 먹어요`)
}

};

dog.eat('고구마'); //dog의 eat에 접근하는데 고구마를 전달 food에 고구마! 고구마는 전달인자

/*03프로퍼티 접근*/


var dog = {
    name : '뽀삐', //뽀삐가 뭘 먹을 때 어떤 음식을 먹을지 선언
    eat : function(food){
    console.log(`${this.name}은 ${food}를 맛있게 먹어요`)
    }
    
    };
    
//마침표 표기법
dog.eat('고구마');
console.log(dog.name); //마침표 표기법으로 값에 접근할 수 있

//대괄호 표기법
console.log(dog['name'])//'감싸서 대괄호 안에 넣기'
dog['eat']('고구마');

var obj = {
'dash-key' : 'dash-value',
0:1

};

//console.log(obj.dash-key);
//console.log(obj.'dash-key');
//console.log(obj.[dash-key]);
console.log(obj['dash-key']);

/*04_프로퍼티 값 변경, 추가, 삭제*/
var dog = {
name : '뽀삐',

};

//이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신됨
dog.name='두부';
dog['name']='두부';
console.log(dog);

//프로퍼티 동적 추가
dog.age = 3;
dog['age'] = 3;
console.log(dog);

//프로퍼티 삭제
delete dog.age;
delete dog.run; //없는거 삭제하면 에러 안나고 무시됨 존재하지 않는 프로퍼티 삭제 무시
console.log(dog);

/*01_프로퍼티 값 단축 구문 */
var id = 'p-0001';
var price = 30000;

var product = {
id : id,
price : price  //price키에 price
};

console.log(product);

//변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있음
//프로퍼티 키는 변수 이름으로 자동으로 생성 됨
var product2 = {id, price}; //변수에 나와있는 값만. 키를 생략하고
console.log(product2);

/*02_메소드 단축*/

var dog = {
    name : '뽀삐',
    eat : function(food) {
        console.log(`${this.name}은 ${food}를 맛있게 먹어요`);
    }
};

dog.eat('고구마');

//ES6에서는 메소드를 정의할 때 function 키워드를 생략한 축약 표현을 사용할 수 있음
var dog2 = {
    name : '뽀삐',
    eat(food) { //eat라는 것에 food 이렇게 쓸 수 있음 function생략되어있으면 key값 임식
                console.log(`${this.name}은 ${food}를 맛있게 먹어요`);
    }
};

dog2.eat('고구마');

/*in 연산자 :프로퍼티 존재 여부 확인하기*/

var student = {
    name : '유관순',
    age : 16,
    test : undefined
};

console.log(student.name === undefined);//student.name은 값이 없니 라고 묻는 것 '유관순'이라 존재해서 false
console.log(student.height === undefined);//height가 존재하지 않으니까 true
console.log(student.test === undefined); //프로퍼티 값이 undefined라 프로퍼티는 존재하지만 true - 존재하지 않음으로 판별하는 문제

console.log("name" in student);
console.log("height" in student);
console.log("test" in student);//in으로 존재 하는지 안하는지 여부 확인 가능

/* for-in 반복문 : 객체의 모든 키 순회 */
//객체가 갖고있는 모든 키 찾을 수 있음

var student = {
name : '유관순',
age : 16,
getInfo : function(){
    return `${this.name}은 ${this.age}입니다`;
}
};

for(var key in student) {
    console.log(`key : ${key}`);
    console.log(`student[key] : ${student[key]}`);
    //student에 있는 변수 하나씩 꺼내서 변수에 담겠다는 뜻 student에 있는 거 쭉 찾아서 key라는 변수에 담겠다는 뜻 
}

