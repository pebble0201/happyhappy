250620 교육일지

bidirection

데이터베이스의 테이블은 외래키 하나로 양방향 조회가 가능하지만 객체는 서로 다른 두 단방향 참조를 합쳐서 양
방향이라고 한다. 따라서 두 개의 연관 관계 중 연관 관계의 주인을 정하고, 주인이 아닌 연관 관계를 하나 더 추가하
는 방식으로 작성하게 된다. 양방향 연관 관계는 항상 설정하는 것이 아니라 반대 방향으로도 접근하여 객체 그래프
탐색을 할 일이 많은 경우에만 사용한다.
양방향 연관 관계시 연관 관계의 주인(Owner)라는 이름으로 인해 오해가 있을 수 있다. 비즈니스 로직 상 더 중요
하다고 연관 관계의 주인이 되는 것이 아니다. 비즈니스 중요도를 배제하고 단순히 외래키 관리자의 의미를 부여해
야 한다. 연관 관계의 주인은 외래키를 가지고 있는 엔터티이다.
메뉴 엔터티는 카테고리 엔터티의 카테고리 코드를 참조하고 있다. 즉 외래키를 가지고 있는 메뉴 엔터티가 연관 관
계의 주인인 것이다.
양방향 매핑에서 어느 한 쪽이 연관 관계의 주인이 되면, 주인이 아닌 쪽에서는 속성을 지정해주어야 한다. 이때, 연
관 관계의 주인이 아닌 객체에 mappedBy 를 써서 연관 관계 주인 객체의 필드명을 매핑 시켜 놓으면 양방향 관계를
적용 시킬 수 있다.

jpql

JPQL은 엔터티 객체를 중심으로 개발할 수 있는 객체 지향 쿼리이다. SQL보다 간결하며 특정 DBMS에 의존하지
않는다. 방언을 통해 해당 DBMS에 맞는 SQL을 실행하게 된다. JPQL은 find() 메소드를 통한 조회와 다르게 항
상 데이터베이스에 SQL을 실행해서 결과를 조회한다.
1-1. 기본 문법
SELECT , UPDATE , DELETE 등의 키워드 사용은 SQL과 동일하다. INSERT 는 persist() 메소드를 사용하면 된다. 키
워드는 대소문자를 구분하지 않지만, 엔터티와 속성은 대소문자를 구분함에 유의한다. 엔터티 별칭을 필수로 사용
해야 하며 별칭 없이 작성하면 에러가 발생한다.
JPQL 사용 방법은 다음과 같다.
1. 작성한 JPQL(문자열)을 entityManager.createQuery() 메소드를 통해 쿼리 객체로 만든다.
2. 쿼리 객체는 TypedQuery , Query 두 가지가 있다.
a. TypedQuery : 반환할 타입을 명확하게 지정하는 방식일 때 사용하며 쿼리 객체의 메소드 실행 결과로 지
정한 타입이 반환 된다.
b. Query : 반환할 타입을 명확하게 지정할 수 없을 때 사용하며 쿼리 객체 메소드의 실행 결과로 Object 또
는 Object[]이 반환 된다.
3. 쿼리 객체에서 제공하는 메소드 getSingleResult() 또는 getResultList() 를 호출해서 쿼리를 실행하고 데이터
베이스를 조회한다.
a. getSingleResult() : 결과가 정확히 한 행일경우 사용하며 없거나 많으면 예외가 발생한다.
b. getResultList() : 결과가 2행 이상일 경우 사용하며 컬렉션을 반환한다. 결과가 없으면 빈 컬렉션을 반환한다.

projection

SELECT 절에 조회할 대상을 지정하는 것을 프로젝션이라고 한다. 

1. 엔터티 프로젝션 : 원하는 객체를 바로 조회할 수 있다. 조회된 엔티티는 영속성 컨텍스트가 관리한다.
2. 임베디드 타입 프로젝션 : 조회의 시작점이 될 수 없다. (from 절 사용 불가) 임베디드 타입은 영속성 컨텍스트에
서 관리되지 않는다.
3. 스칼라 타입 프로젝션 : 숫자, 문자, 날짜 같은 기본 데이터 타입이다. 스칼라 타입은 영속성 컨텍스트에서 관리되
지 않는다.
4. new 명령어를 활용한 프로젝션 : 다양한 종류의 단순 값들을 DTO로 바로 조회하는 방식으로 new 패키지
명.DTO명을 쓰면 해당 DTO로 바로 반환받을 수 있다. new 명령어를 사용한 클래스의 객체는 엔티티가 아니므로
영속성 컨텍스트에서 관리되지 않는다. 
